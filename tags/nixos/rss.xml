<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NixOS on Wimpy's World</title><link>https://wimpysworld.com/tags/nixos/</link><description>Recent content in NixOS on Wimpy's World</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><managingEditor>martin@wimpress.com (Martin Wimpress)</managingEditor><webMaster>martin@wimpress.com (Martin Wimpress)</webMaster><lastBuildDate>Thu, 15 May 2025 13:37:42 +0100</lastBuildDate><atom:link href="https://wimpysworld.com/tags/nixos/rss.xml" rel="self" type="application/rss+xml"/><item><title>Nothing but Nix</title><link>https://wimpysworld.com/posts/nothing-but-nix-github-actions/</link><pubDate>Thu, 15 May 2025 13:37:42 +0100</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/nothing-but-nix-github-actions/</guid><description>&lt;p>Have you ever tried to build a complex &lt;a href="https://nixos.org/">NixOS&lt;/a> ️❄️ configuration in GitHub Actions only to be greeted by the dreaded &lt;em>&amp;ldquo;no space left on device&amp;rdquo;&lt;/em> error? I certainly have, and it&amp;rsquo;s been driving me bonkers for quite some time! 😖&lt;/p>
&lt;p>&lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories">Standard GitHub Actions runners&lt;/a> come with a paltry ~20GB of free disk space, or so it would seem. Which sounds decent until you try to build sophisticated NixOS or &lt;a href="https://nix-community.github.io/home-manager/">Home Manager&lt;/a> configurations. A comprehensive workstation or home lab server setup can consume 10-15GB due to all the included packages and dependencies, leaving precious little headroom for anything else 🤏&lt;/p>
&lt;p>This space limitation effectively meant I couldn&amp;rsquo;t build my full workstation and server configurations in CI. So annoying! 😠 I wanted my CI to cache complete builds to &lt;a href="https://flakehub.com/">FlakeHub Cache&lt;/a>, but was forever stuck with only partial builds or individual packages that wouldn&amp;rsquo;t properly test the complete configurations. This meant that each configuration change on my workstations and servers required frustrating additional compilation time for things like 3rd party kernel modules, &lt;a href="https://ollama.com/">Ollama&lt;/a>, custom package overrides, and more - all because I couldn&amp;rsquo;t get full builds cached through CI ️🥺&lt;/p>
&lt;p>Well, I&amp;rsquo;d had enough of that nonsense and decided to solve the problem once and for all 🧠&lt;/p>
&lt;h2 id="introducing-nothing-but-nix-">Introducing &lt;em>Nothing but Nix&lt;/em> ️❄️&lt;/h2>
&lt;p>I&amp;rsquo;m chuffed to bits to announce &lt;a href="https://github.com/marketplace/actions/nothing-but-nix">&lt;em>Nothing but Nix&lt;/em>&lt;/a>, a GitHub Action that &lt;strong>brutally reclaims&lt;/strong> disk space 🪓 on runners and transforms them into Nix powerhouses!&lt;/p>
&lt;p>Here&amp;rsquo;s what it does in a nutshell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- uses: actions/checkout@v4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- uses: wimpysworld/nothing-but-nix@main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- uses: DeterminateSystems/determinate-nix-action@main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- run: |&lt;span style="color:#87ceeb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> &lt;/span> nix flake check
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result? Instead of ~20GB for your &lt;a href="https://zero-to-nix.com/concepts/nix-store/">Nix store&lt;/a>, you get &lt;strong>65GB to 130GB&lt;/strong> of sweet, glorious Nix-dedicated space. That&amp;rsquo;s enough to build even the chonkiest of configurations! 🪨&lt;/p>
&lt;h2 id="space-the-final-frontier-">Space, the Final Frontier 🌌&lt;/h2>
&lt;p>Working at &lt;a href="https://determinate.systems">Determinate Systems&lt;/a>, I get to see firsthand how powerful Nix can be when properly cached. Our &lt;a href="https://flakehub.com">FlakeHub Cache&lt;/a> makes system updates lightning fast ⚡ but I couldn&amp;rsquo;t fully leverage it in CI because my builds kept running out of space.&lt;/p>
&lt;p>I wanted to be able to &lt;strong>build and test all my configurations&lt;/strong> in CI:&lt;/p>
&lt;ul>
&lt;li>💁 &lt;strong>Servers:&lt;/strong> media services, local LLMs, website, fediverse services, distributed storage, backup&lt;/li>
&lt;li>️🖥️ &lt;strong>Workstations:&lt;/strong> dual GPU, loaded with dev tools, content creation apps and local LLMs&lt;/li>
&lt;li>💻 &lt;strong>Laptops:&lt;/strong> optimized for travel, media on the go, presentations and development&lt;/li>
&lt;li>👻 &lt;strong>VMs:&lt;/strong> for &lt;a href="https://ubuntu-mate.org">Linux desktop development&lt;/a> and testing&lt;/li>
&lt;/ul>
&lt;p>But GitHub&amp;rsquo;s ~20GB limitation kept getting in the way 🙅 Sure, I could have paid GitHub for their larger runners with more disk space, but being both cheap and stubborn, I wasn&amp;rsquo;t having any of that! 💸❌ Instead, I started thinking, &lt;em>&amp;ldquo;Hang on a minute, those free runners must have more space somewhere - I just need to find it and claim it!&amp;rdquo;&lt;/em> 🤔💭&lt;/p>
&lt;p>After digging through the runner specs and file system layout, I discovered that &lt;strong>GitHub Actions runners have a large chunk of free space on the &lt;code>/mnt&lt;/code> filesystem that&amp;rsquo;s barely used&lt;/strong> 🤯 There was also the possibility to reclaim significant space by purging pre-installed software that Nix users don&amp;rsquo;t need anyway 😈&lt;/p>
&lt;h2 id="the-slightly-mad-science-bit-">The Slightly Mad Science Bit ‍🧑‍🔬&lt;/h2>
&lt;p>At its core, &lt;em>Nothing but Nix&lt;/em> uses a two-pronged attack:&lt;/p>
&lt;h3 id="1-the-initial-slash-instant-volume-creation">1. The Initial Slash: Instant Volume Creation&lt;/h3>
&lt;p>First, the action creates a large loop device from free space on &lt;code>/mnt&lt;/code> and sets up a properly tuned BTRFS filesystem:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0f0"># Create a large disk image in the free space&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">free_space&lt;/span>=&lt;span style="color:#f00">$(&lt;/span>df -m --output=avail /mnt | tail -n &lt;span style="color:#f60">1&lt;/span> | tr -d &lt;span style="color:#87ceeb">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f00">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">loop_dev&lt;/span>=&lt;span style="color:#f00">$(&lt;/span>sudo losetup --find&lt;span style="color:#f00">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo fallocate -l &lt;span style="color:#f00">$((&lt;/span>free_space - &lt;span style="color:#f60">1024&lt;/span>&lt;span style="color:#f00">))&lt;/span>M &lt;span style="color:#87ceeb">&amp;#34;/mnt/disk0.img&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo losetup &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#87ceeb">${&lt;/span>&lt;span style="color:#eedd82">loop_dev&lt;/span>&lt;span style="color:#87ceeb">}&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span> &lt;span style="color:#87ceeb">&amp;#34;/mnt/disk0.img&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0f0"># Set up an optimized BTRFS filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkfs.btrfs -L nix -d raid0 -m raid0 --nodiscard &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#87ceeb">${&lt;/span>&lt;span style="color:#eedd82">loop_dev&lt;/span>&lt;span style="color:#87ceeb">}&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount &lt;span style="color:#eedd82">LABEL&lt;/span>=nix /nix -o noatime,nobarrier,nodiscard,compress=zstd:1,space_cache=v2,commit=&lt;span style="color:#f60">120&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>This immediately provides around 65GB of Nix-ready space before your workflow even gets going!&lt;/strong> 💪
I could have stopped here, but did I mention beging stubborn yet? 🫏&lt;/p>
&lt;h3 id="2-the-background-purge-merciless-space-reclamation">2. The Background Purge: Merciless Space Reclamation&lt;/h3>
&lt;p>&lt;strong>While your workflow continues&lt;/strong>, &lt;em>Nothing but Nix&lt;/em> starts a background process to ruthlessly eliminate unnecessary software:&lt;/p>
&lt;ul>
&lt;li>Docker images? Gone! 🗑️&lt;/li>
&lt;li>Language runtimes? Obliterated! 💥&lt;/li>
&lt;li>Package managers? Annihilated! 💣&lt;/li>
&lt;li>Documentation? Vaporized! 🔥&lt;/li>
&lt;/ul>
&lt;p>As space is reclaimed, it creates a second disk image on the root file system and adds it to the BTRFS pool, &lt;strong>dynamically growing your Nix volume up to around 130GB.&lt;/strong> 🚀&lt;/p>
&lt;p>The file system purge is powered by &lt;code>rmz&lt;/code> (from the &lt;a href="https://github.com/SUPERCILEX/fuc">Fast Unix Commands (FUC)&lt;/a> project) - a high-performance alternative to &lt;code>rm&lt;/code> that makes deletion blazingly fast. &lt;strong>Using traditional &lt;code>rm&lt;/code> a full file system purge took ~11 minutes ⏳😞 &lt;code>rmz&lt;/code> cut that to under 60 seconds!&lt;/strong> ️⏱️😀&lt;/p>
&lt;h3 id="btrfs-with-nodiscard">BTRFS with &lt;code>nodiscard&lt;/code>?&lt;/h3>
&lt;p>I&amp;rsquo;m using &lt;a href="https://btrfs.readthedocs.io/en/latest/">BTRFS&lt;/a> for the volume because it:&lt;/p>
&lt;ol>
&lt;li>Supports dynamic device addition&lt;/li>
&lt;li>Has built-in compression to save even more space&lt;/li>
&lt;li>Allows optimal space utilization with RAID0 layout&lt;/li>
&lt;/ol>
&lt;p>The &lt;strong>&lt;code>nodiscard&lt;/code> mount option is absolutely essential&lt;/strong> because we&amp;rsquo;re using loop devices backed by &lt;a href="https://en.wikipedia.org/wiki/Sparse_file">sparse files&lt;/a>.&lt;/p>
&lt;p>Without it, BTRFS would try to issue &lt;a href="https://btrfs.readthedocs.io/en/latest/Trim.html">TRIM/discard&lt;/a> commands that cause allocation size to be misreported when using loop devices. This misreporting would result in inaccurate space accounting. The &lt;code>nodiscard&lt;/code> option ensures the filesystem maintains an accurate picture of its available storage.&lt;/p>
&lt;h2 id="choose-your-weapon-the-hatchet-protocol-">Choose Your Weapon: The Hatchet Protocol 🪓&lt;/h2>
&lt;p>Not everyone needs the same level of space reclamation, so I&amp;rsquo;ve added different &lt;em>&amp;ldquo;Hatchet Protocol&amp;rdquo;&lt;/em> levels to control how aggressive the action is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- uses: wimpysworld/nothing-but-nix@main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hatchet-protocol: &amp;#39;cleave&amp;#39; # Options: holster, carve, cleave (default), rampage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Protocol&lt;/th>
&lt;th>&lt;code>/nix&lt;/code>&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Holster&lt;/td>
&lt;td>~65GB&lt;/td>
&lt;td>Keep the hatchet sheathed, use space from &lt;code>/mnt&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Carve&lt;/td>
&lt;td>~85GB&lt;/td>
&lt;td>Craft and combine free space from &lt;code>/&lt;/code> and &lt;code>/mnt&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cleave&lt;/td>
&lt;td>~115GB&lt;/td>
&lt;td>Make decisive cuts to large packages&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rampage&lt;/td>
&lt;td>~130GB&lt;/td>
&lt;td>Relentless elimination of all bloat&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I recommend &lt;strong>Cleave&lt;/strong> for most users, which is the default setting. It strikes a good balance between reclaiming space and keeping some useful tools around. But if you&amp;rsquo;re a proper Nix enthusiast who believes that &lt;code>#nix-is-life&lt;/code>, the Rampage protocol will squeeze out every last byte of space for your Nix store ️️❄️&lt;/p>
&lt;h2 id="from-frustration-to-freedom-">From Frustration to Freedom ️🕊️&lt;/h2>
&lt;p>Since implementing &lt;em>Nothing but Nix&lt;/em>, I&amp;rsquo;ve been able to build &lt;strong>all&lt;/strong> my NixOS and Home Manager configurations in CI. This means:&lt;/p>
&lt;ol>
&lt;li>🔒 Every &lt;code>flake.lock&lt;/code> update is fully tested against my complete configuration set&lt;/li>
&lt;li>✅ All successful builds are cached to FlakeHub Cache&lt;/li>
&lt;li>⚡ System updates are lightning-fast&lt;/li>
&lt;/ol>
&lt;p>This has been an absolute game-changer for my workflow. Now when I apply updates to any of my devices, everything is delivered directly from &lt;code>cache.flakehub.com&lt;/code> with zero local compilation time! 🚀 All packages have been pre-built and verified in CI, meaning updates that would have taken ages to compile (&lt;em>looking at you &lt;code>ollama&lt;/code>&lt;/em> 👀) locally now complete in seconds. It&amp;rsquo;s the difference between waiting for a coffee break and a blink-and-you&amp;rsquo;ll-miss-it experience 🤩&lt;/p>
&lt;p>Here&amp;rsquo;s what the build times look like:&lt;/p>
&lt;ul>
&lt;li>💁 2x Servers: ~5-10 minutes&lt;/li>
&lt;li>️🖥️ 2x Workstations: ~6-13 minutes&lt;/li>
&lt;li>💻 4x Laptops: ~7-10 minutes&lt;/li>
&lt;li>👻 2x Virutal Manachines: ~4-10 minutes&lt;/li>
&lt;li>📦 59x Local packages: ~5-14 minutes&lt;/li>
&lt;/ul>
&lt;h2 id="getting-started-with-nothing-but-nix-">Getting Started with &lt;em>Nothing but Nix&lt;/em> ✨&lt;/h2>
&lt;p>Ready to give it a go? Here&amp;rsquo;s how to use it in your GitHub Actions workflow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>name: &lt;span style="color:#87ceeb">&amp;#34;Test Nix Flake&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>on:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull_request:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> push:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> branches: [ main ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jobs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tests:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id-token: write
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contents: read
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> steps:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - uses: actions/checkout@v4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0f0"># 👇 Add this before installing Nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - uses: wimpysworld/nothing-but-nix@main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - uses: DeterminateSystems/determinate-nix-action@main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - run: |&lt;span style="color:#87ceeb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> # Now you have 100+ GB for your Nix builds!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> nix build . -L
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> nix flake check&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For FlakeHub users, make sure you add the &lt;code>permissions&lt;/code> block as shown above. This allows &lt;a href="https://determinate.systems/nix/">Determinate Nix&lt;/a> to authenticate with FlakeHub and FlakeHub Cache.&lt;/p>
&lt;h2 id="beyond-storage-to-virtual-machines-">Beyond Storage to Virtual Machines? 🔮&lt;/h2>
&lt;p>Now that I&amp;rsquo;ve proven large volumes can be dynamically constructed in GitHub runners, I&amp;rsquo;m starting to think about what else might be possible. A GitHub action that implements something like &lt;a href="https://github.com/quickemu-project/quickemu">Quickemu&lt;/a> (&lt;em>another project of mine&lt;/em>), to standup KVM-accelerated VMs inside a GitHub runner is my favourite idea 💡&lt;/p>
&lt;p>GitHub has &lt;a href="https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-host">recently announced&lt;/a> hardware acceleration for Android virtualization on Linux runners, which means the KVM infrastructure is already there and avilable for open source projects and larger runners 😯 All we need to do is leverage it for our own VMs.&lt;/p>
&lt;p>Imagine being able to run a full VM of your validated build environment inside GitHub Actions! It would be like having a self-hosted runner, but without the self-hosting 😏 And it just so happens that the &lt;a href="https://github.com/DeterminateSystems/determinate-nix-action">Determinate Nix Action&lt;/a> enables KVM in GitHub runners. Coincidence? 😉&lt;/p>
&lt;h2 id="build-something-massive-">Build Something Massive ️🏗️&lt;/h2>
&lt;p>&lt;em>Nothing but Nix&lt;/em> removes one of the most frustrating limitations for Nix users in GitHub Actions. No more trimming your configurations to fit into tiny spaces - now you can build and test your full NixOS fleet with confidence 🤓&lt;/p>
&lt;p>Give it a try, and let me know what you think!&lt;/p>
&lt;p>The action is available at:&lt;/p>
&lt;ul>
&lt;li>GitHub: &lt;a href="https://github.com/wimpysworld/nothing-but-nix">wimpysworld/nothing-but-nix&lt;/a>&lt;/li>
&lt;li>Marketplace: &lt;a href="https://github.com/marketplace/actions/nothing-but-nix">&lt;em>Nothing but Nix&lt;/em>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you run into any issues or have ideas for improvements, please open an issue on GitHub. And if this tool saves your CI builds, consider giving the repo a star! ⭐&lt;/p>
&lt;p>Happy Nixing! ❄️&lt;/p></description><summary>The Nix Space Heist: Reclaiming 130GB in GitHub Actions</summary></item><item><title>Why I chose the ThinkPad Z13 Gen1 as my Linux laptop</title><link>https://wimpysworld.com/posts/why-i-chose-the-thinkpad-z13-as-my-linux-laptop/</link><pubDate>Tue, 18 Apr 2023 14:30:26 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/why-i-chose-the-thinkpad-z13-as-my-linux-laptop/</guid><description>&lt;p>During the second half of 2022, I dusted off my laptop and travelled to three events for the first time in over two years. During these trips, it became apparent that my laptop is not the right tool for the job.&lt;/p>
&lt;p>At &lt;a href="https://events.linuxfoundation.org/archive/2022/kubecon-cloudnativecon-europe/">KubeCon EU 2022&lt;/a> my colleague Lindsay brought her &lt;a href="https://www.apple.com/uk/macbook-pro-13/">Apple Macbook Pro M1&lt;/a>. It was lightweight, compact, looked fabulous and had epic battery life. Meanwhile, my ThinkPad P1 Gen 1 looked fabulous but it is a bit of a chonker and a massive power pig 🔌🐖 Battery anxiety was constant that week and also on my subsequent trips to &lt;a href="https://www.sreday.com/">SREday 2022&lt;/a> and the &lt;a href="https://events.canonical.com/event/2/">Ubuntu Summit 2022&lt;/a>. Sensing that 2022 wasn&amp;rsquo;t an outlier and more travel would be on the cards in 2023 I decided that I wanted some of that thin and light laptop action. In early December 2022, I went hunting for a Linux laptop and this is my journey.&lt;/p>
&lt;h2 id="as-featured-on-linux-matters-">As featured on Linux Matters! 🎙️&lt;/h2>
&lt;p>I recently discussed my hunt for a new Linux Loving Laptop on the &lt;a href="https://linuxmatters.sh/">Linux Matters&lt;/a> podcast. &lt;strong>You can hear that discussion with my friends Alan and Mark in &lt;a href="https://linuxmatters.sh/1/">Linux Matters: Mastodon on My Résumé (Episode 1)&lt;/a>&lt;/strong>.&lt;/p>
&lt;p class="text-center">
&lt;a href="https://linuxmatters.sh" target="_blank">&lt;img src="https://linuxmatters.sh/img/episode/linuxmatters-banner-3000x750.webp" class="img-fluid" alt="Linux Matters Podcast"/>&lt;/a>
&lt;br />
&lt;em>Linux Matters Podcast&lt;/em>
&lt;/p>
&lt;h2 id="past-laptop-purchasing-mistakes-">Past laptop purchasing mistakes 😱&lt;/h2>
&lt;blockquote>
&lt;p>&amp;ldquo;Those that fail to learn from history are doomed to repeat it&amp;rdquo; - Winston Churchill.&lt;/p>
&lt;/blockquote>
&lt;p>The requirements for my last two laptop purchases were very different from what I need today; a &lt;a href="https://www.dell.com/en-uk/shop/laptop-computers-2-in-1-pcs/precision-5550-mobile-workstation/spd/precision-15-5550-laptop">Dell XPS 15 5550&lt;/a> and &lt;a href="https://www.lenovo.com/gb/en/p/laptops/thinkpad/thinkpadp/thinkpad-p1/22ws2wpp101">ThinkPad P1 Gen1&lt;/a> Both have significant power requirements with 15.6&amp;quot; UHD displays and discrete NVIDIA GPUs. The ThinkPad P1 Gen also sports a Xeon CPU ⚡️ These made sense when I bought them, I was travelling one week every month and regularly compiling large applications, building container images, VMs and operating system images. These days I have a &lt;a href="https://www.amd.com/en/products/cpu/amd-ryzen-threadripper-3970x">Threadripper 3970X&lt;/a> workstation at home that I can connect to via &lt;a href="https://tailscale.com/">Tailscale&lt;/a> to run compute-intensive tasks. I simply don&amp;rsquo;t need a workhorse 🐴 laptop anymore.&lt;/p>
&lt;h3 id="laptop-criteria-">Laptop criteria 📑&lt;/h3>
&lt;p>I&amp;rsquo;m deeply impressed with the outstanding work the &lt;a href="https://asahilinux.org/">Asahi Linux&lt;/a> team are doing to enable Linux on Apple Silicon Macs, but running Linux on an M1 Mac isn&amp;rsquo;t viable for me as some hardware support (HDMI for example) is still a work in progress at the time of writing. Not ideal when you&amp;rsquo;re a conference speaker and running booth demos.&lt;/p>
&lt;p>These are my criteria for the new laptop. Some must-haves, some nice-to-haves and some hard exclusions.&lt;/p>
&lt;ul>
&lt;li>Fully Linux compatible.
&lt;ul>
&lt;li>Linux pre-installed to demonstrate Linux is fully supported&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Full working day battery life; ~8 hours in my opinion.&lt;/li>
&lt;li>Low-power CPU, 35W or under
&lt;ul>
&lt;li>Ideally AMD 6000 series but a 12th Gen Intel as a compromise&lt;/li>
&lt;li>No 11th Gen Intel or AMD 5000 series CPUs will be considered&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>64GB RAM, will compromise on 32GB RAM&lt;/li>
&lt;li>13&amp;quot; or 14&amp;quot; 1920x1200 matte display
&lt;ul>
&lt;li>No UHD resolutions display will be considered (for power-saving reasons)&lt;/li>
&lt;li>Touch support is a nice-to-have, but not essential&lt;/li>
&lt;li>1920x1080 as a compromise, but nothing lower&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No discrete GPU. Again for power-saving reasons.&lt;/li>
&lt;li>USB-C charging&lt;/li>
&lt;li>Dual NVME SSD, or at least a single 2TB (or more) SSD&lt;/li>
&lt;li>Decent keyboard and touchpad&lt;/li>
&lt;li>The Laptop should weigh close to 1kg&lt;/li>
&lt;li>Premium build quality and design (somewhat subjective I know)&lt;/li>
&lt;/ul>
&lt;p>With this list of requirements established, I &lt;a href="https://docs.google.com/spreadsheets/d/1kaB1pxbbYa1ebxeDRTguQ9EZol1EhM-0FE45Da8AOn8/edit#gid=0">started collating Linux laptop comparison notes in this somewhat idiosyncratic spreadsheet&lt;/a>&lt;/p>
&lt;p class="text-center">
&lt;a href="https://docs.google.com/spreadsheets/d/1kaB1pxbbYa1ebxeDRTguQ9EZol1EhM-0FE45Da8AOn8/edit#gid=0" target="_blank">&lt;img src="./spreadsheet.webp" class="img-fluid" alt="Linux Laptop Comparison Spreadsheet"/>&lt;/a>
&lt;br />
&lt;em>A spreadsheet that probably only makes sense to me&lt;/em>
&lt;/p>
&lt;p>Looking at the list of laptops in the sheet above, you might be wondering why I didn&amp;rsquo;t consider any laptops from the established dedicated Linux laptop vendors such as &lt;a href="https://www.entroware.com/store/">Entroware&lt;/a>, &lt;a href="https://slimbook.es/">Slimbook&lt;/a> and &lt;a href="https://starlabs.systems/">StarLabs&lt;/a>. Well, I did look at everything they offered at the time and none of them had a model available that met the requirements I&amp;rsquo;ve outlined above or the estimated dispatch time was nearly half a year.&lt;/p>
&lt;p>I&amp;rsquo;m not going to elaborate on the rationale behind ruling certain laptop models in or out, but I will say this; I was very impressed to see &lt;a href="http://lenovo.com/linux">&lt;strong>every laptop in the Lenovo ThinkPad lineup had a Linux pre-install option&lt;/strong>&lt;/a> of either &lt;a href="https://ubuntu.com">Ubuntu&lt;/a> or &lt;a href="https://getfedora.org/">Fedora&lt;/a> in &amp;ldquo;Build YourPC&amp;rdquo; system configurator. While comparing the power requirements of Intel&amp;rsquo;s i7-12xx series and AMD&amp;rsquo;s 68x0 series CPU at the time, I was sold on the impressive battery endurance of AMD&amp;rsquo;s offerings and the superior integrated graphics, so I excluded any laptop with Intel CPUs quite early on.&lt;/p>
&lt;h2 id="lenovo-thinkpad-z13-gen-1-with-ubuntu-pre-installed">Lenovo ThinkPad Z13 Gen 1 with Ubuntu pre-installed&lt;/h2>
&lt;p>I went with the &lt;a href="https://www.lenovo.com/gb/en/p/laptops/thinkpad/thinkpadz/thinkpad-z13-(13-inch-amd)/21d2cto1wwgb1">ThinkPad Z13 Gen 1&lt;/a> with Ubuntu pre-installed, and the &lt;a href="https://www.lenovo.com/gb/en/p/laptops/thinkpad/thinkpadt/thinkpad-t14s-gen-3-(14-inch-amd)/len101t0015">ThinkPad T14s Gen 3&lt;/a> was runner-up in my selection process.&lt;/p>
&lt;h3 id="specifications-">Specifications 📝&lt;/h3>
&lt;p>The key specifications for the laptop I ordered are AMD Ryzen 7 PRO 6850U CPU, 32 GB LPDDR5-6400MHz (Soldered), 1 TB SSD M.2 2242 PCIe Gen4, 13.3&amp;quot; WUXGA (1920 x 1200), IPS, Anti-Glare, Non-Touch display weighing in at 1.19kg. I think this configuration hits the sweet spot for battery endurance, more on that later.&lt;/p>
&lt;p>I&amp;rsquo;m not a fan of the increasing trend of soldering RAM on motherboards, but that was common across all the models of laptops I was considering. If &lt;a href="https://frame.work/gb/en">Framework&lt;/a> had offered an AMD 6000 series CPU option at the time, I would&amp;rsquo;ve had a Framework laptop on my short list as the modular design of the Framework laptops is very appealing.&lt;/p>
&lt;p>And yes, I did make a compromise with the laptop specifications; that 1TB M.2 SSD is below my minimum requirement of 2TB. I did do my homework though and will present my creative upgrade solution in a future blog post. &lt;a href="https://wimpysworld.com/posts/rss.xml">Like and Subscribe&lt;/a> 😉&lt;/p>
&lt;h3 id="build-quality--design-">Build Quality &amp;amp; Design 💻️&lt;/h3>
&lt;p>Without a doubt, the ThinkPad Z13 Gen 1 is a gorgeous laptop. I do not have enough superlatives to express just how much I love it. It is, in my option, an almost flawless design. Exactly the compact form factor laptop I was seeking; it&amp;rsquo;s beautiful to look at from any angle and a delight to use. Here are some highlights.&lt;/p>
&lt;p class="text-center">
&lt;img src="./ThinkPad_Z13_Gen_1_CT1_02.webp" class="img-fluid" alt="ThinkPad Z13 Gen 1"/>
&lt;br />
&lt;em>ThinkPad Z13 Gen 1&lt;/em>
&lt;/p>
&lt;p>The laptop is engineered from 75% recycled aluminium and 95% recycled plastics, then boxed in 100% renewable, compostable packaging. The touchpad is sublime and amazingly 120mm wide on the compact laptop. The haptic touch is simply excellent. The touchpad is the most Macbook-like touchpad I&amp;rsquo;ve used on any PC and it is so good it has caused me to change what desktop environment I now use. More on this in a future blog post. However, there is currently no Linux software to &lt;a href="https://psref.lenovo.com/syspool/Sys/PDF/datasheet/ThinkPad_Z_Series_Haptic_TouchPad_Settings.pdf">configure the haptic touchpad settings&lt;/a> such as click force and touchpad feedback intensity but I&amp;rsquo;ve been perfectly happy with the defaults. If you do dual boot Windows the haptic settings configured via Windows are stored on the device and carry over to Linux.&lt;/p>
&lt;p>The Keyboard is an excellent low-profile design, each key has ~1.2mm of travel which is the same as the actuation point on my Razer Huntsman V2 TKL keyboards with opto-mechanical switches. Most importantly the Fn&lt;/kbd> key is in the correct place on the Z13 and not where ThinkPads have been incorrectly plonking it for years. Fight me! 🥊 If you are a long-time ThinkPad owner, it is likely you&amp;rsquo;ll hate the idea of the keyboard and touchpad on the Z13 since it is quite a departure from the traditional design. But I went into this with my eyes 👀 open and have watched and read many reviews.&lt;/p>
&lt;p class="text-center">
&lt;img src="./ThinkPad_Z13_Gen_1_CT4_01.webp" class="img-fluid" alt="Correct Fn key placement on ThinkPad Z13 Gen 1"/>
&lt;br />
&lt;em>"This is the way"&lt;/em>
&lt;/p>
&lt;p>The Display is bright (400nits), anti-reflective and anti-smudge, covers 100% of the sRGB colour gamut and the laptop is perfectly balanced so it can be opened one-handed. I&amp;rsquo;m embracing the compact, thin and light lifestyle; so the two USB-C ports are fine with me as I&amp;rsquo;ve chosen a laptop configuration with excellent battery endurance (more on that in a bit) and plan to use it completely untethered most of the time with cables and adapters only plugged in for very specific tasks and overnight recharging.&lt;/p>
&lt;p>I do have one niggle though; there is an unusable 2242 M.2 slot on the motherboard. It is only intended for use with select models of WWAN cards, none of which are a configuration option for the UK models of the Z13. It doesn&amp;rsquo;t look like the antenna is wired in either, so even if you do get a supported WWAN card aftermarket it is unlikely to work well; if at all. I can share my iPhone&amp;rsquo;s mobile service via Wifi, so not a deal breaker in that regard but it is rather annoying to have an M.2 slot on the motherboard and nothing I can do with it.&lt;/p>
&lt;h3 id="ubuntu-pre-install-experience-">Ubuntu pre-install experience 👌&lt;/h3>
&lt;p>It is worth noting that at the time of purchase, selecting Ubuntu or Fedora in the system configuration on the Lenovo website applied a £155 discount! 🤑 Choosing Ubuntu or Fedora across the ThinkPad line applies a discount, although the amount varies based on the model.&lt;/p>
&lt;p>All OEMs that partner with Ubuntu get an OEM designation for each device officially endorsed and supported by Canonical. The ThinkPad Z13 Gen 1 is known as &lt;em>Sutton Newell Abe&lt;/em> and the &lt;code>oem-sutton.newell-abe-meta&lt;/code> package (along with the associated OEM PPA) provides the device-specific hardware enablement and power management tuning.&lt;/p>
&lt;p class="text-center">
&lt;img src="./oem-name.webp" class="img-fluid" alt="ThinkPad Z13 Gen 1 (Sutton Newell Abe)"/>
&lt;br />
&lt;em>ThinkPad Z13 Gen 1 is known as Sutton Newell Abe for OEM enablement&lt;/em>
&lt;/p>
&lt;p>The OEM image of Ubuntu differs from the standard Ubuntu image in a few ways. The most obvious is that OEM image comes with recovery media creation pre-installed. This is a great feature and I highly recommend you use it to create a recovery USB stick, either during the initial setup or post-setup. The OEM image also comes with Chromium and Firefox installed, as opposed to just Firefox in the downloadable release of Ubuntu. IIRC, this is because Chromium has traditionally worked better with touchscreen laptops. The fingerprint reader works. I was able to enrol fingerprints quickly and authenticate GDM logins. But the biometric support does not extend throughout the system; Ubuntu Software doesn&amp;rsquo;t integrate with the fingerprint reader, nor does &lt;code>snapd&lt;/code> or any other privilege escalation.&lt;/p>
&lt;p>I also experienced the touchpad becoming unresponsive, requiring a click to &amp;ldquo;unfreeze&amp;rdquo; it. This happens quite frequently and detracts from what is otherwise an excellent, class-leading, touchpad. I suspect it is overly aggressive power management settings in the OEM image, but I didn&amp;rsquo;t investigate beyond that hunch. Both these issues with the fingerprint reader and touchpad are Ubuntu-specific and nothing related to the actual hardware. Both issues are absent when running NixOS.&lt;/p>
&lt;p>Having a tier-1 vendor such as Lenovo ship a laptop with Ubuntu pre-installed has the benefit of great firmware support. I&amp;rsquo;ve received several firmware updates since I got the laptop, and they have all applied without issue.&lt;/p>
&lt;p class="text-center">
&lt;img src="./firmware-update.webp" class="img-fluid" alt="ThinkPad Z13 Gen 1 firmware updates on Ubuntu"/>
&lt;br />
&lt;em>Firmware updates for the ThinkPad Z13 Gen 1 on Ubuntu 20.04&lt;/em>
&lt;/p>
&lt;h4 id="why-not-ubuntu-2204-">Why not Ubuntu 22.04? 🤔&lt;/h4>
&lt;p>My Z13 was shipped with Ubuntu 20.04.4 with OEM optimised Linux kernel 5.14.0-1054-oem. Some might be perplexed (or annoyed) that it didn&amp;rsquo;t come with Ubuntu 22.04, given it was ordered in late 2022. I used to work for Canonical, and during that time worked with Lenovo to enable Ubuntu on ~60 of their laptops and workstations between 2019 and 2021, so I do have some insight into how this process works. It simply boils down to how the factory image certification process works, and once an image is qualified that is what ships on the device for the duration of its availability. Re-certification adds cost and takes time, so it&amp;rsquo;s extremely rare for a device to have a revised factory image qualified once it has gone on sale.&lt;/p>
&lt;p>Upgrading to Ubuntu 22.04 LTS worked flawlessly, full audio support was restored and no other hardware supported regressed. Brilliant.&lt;/p>
&lt;h4 id="linux-kernel-61-">Linux Kernel 6.1 🌰&lt;/h4>
&lt;p>The pre-installed Ubuntu and Fedora images for the Z13 come with kernels that have backported patches applied to fully support the device. If you buy a ThinkPad Z13 and plan to run another Linux distro on it, make sure you can install Linux kernel version 6.1 or newer. This is to ensure the Qualcomm Wi-Fi 6E NFA725A 2x2 AX chipset is fully supported and that the required patches to properly suspend and resume are available.&lt;/p>
&lt;h3 id="battery-endurance-">Battery endurance 🔋&lt;/h3>
&lt;p>This is, after all, my most important selection criteria. The conclusion here is simple: &lt;strong>11 hours&lt;/strong> ⏱️&lt;/p>
&lt;p>This is 11 hours of mixed-use. Coding in Visual Studio Code. Chatting in Slack and Discord. Video calls in Google Meet and Zoom. Compiling software. Some screen capture with OBS Studio and basic video editing with &lt;a href="https://shotcut.org/">Shotcut&lt;/a>. Closing the lid of the laptop and leaving it suspended for 24 hours depletes the battery by ~4% which is about 2 Wh. Very respectable. I haven&amp;rsquo;t felt the need to profile power consumption or tweak anything as I&amp;rsquo;m get plenty of untethered compute time. I&amp;rsquo;m very happy with the battery life, typically charging the laptop overnight while I sleep and running it all day battery only.&lt;/p>
&lt;h2 id="whats-next-">What&amp;rsquo;s next? 🔮&lt;/h2>
&lt;p>As noted, I did compromise on the 1TB M.2 SSD. I&amp;rsquo;ve come up with an aftermarket solution to upgrade to 2TB which I will post about soon. I chose a laptop pre-installed with Linux for two reasons:&lt;/p>
&lt;ul>
&lt;li>Support companies shipping a Linux operating system pre-installed on their laptops and workstations&lt;/li>
&lt;li>Hard proof Linux works on their hardware&lt;/li>
&lt;/ul>
&lt;p>After using Ubuntu for a few weeks I switched to NixOS. I will be posting about my experience with NixOS on the Z13 in a future blog post and &lt;a href="https://twitch.tv/WimpysWorld">will likely livestream about it on Twitch&lt;/a> as well. TL;DR NixOS 22.11 has fewer issues than Ubuntu 22.04 on the ThinkPad Z13 Gen 1.&lt;/p>
&lt;p>The ThinkPad Z13 Gen 1 is an excellent laptop for my requirements, and I have no regrets. If I were to buy I laptop pre-installed with a Linux distro in the future, I might go for Fedora, just so I can see what the OEM experience is like with Fedora.&lt;/p>
&lt;p>Since I purchased the Z13, &lt;a href="https://frame.work/gb/en/blog/framework-laptop-13-with-13th-gen-intel-core-and-amd-ryzen-7040-series">Framework has announced AMD 7040-series powered laptops&lt;/a> are coming later in 2023; and I&amp;rsquo;m not sure I can resist&amp;hellip;&lt;/p></description><summary>Picking a thin and light Linux laptop with plenty of battery endurance</summary></item></channel></rss>