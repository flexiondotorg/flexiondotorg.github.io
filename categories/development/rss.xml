<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Wimpy's World</title><link>https://wimpysworld.com/categories/development/</link><description>Recent content in Development on Wimpy's World</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><managingEditor>martin@wimpress.com (Martin Wimpress)</managingEditor><webMaster>martin@wimpress.com (Martin Wimpress)</webMaster><lastBuildDate>Mon, 15 Apr 2024 13:37:42 +0100</lastBuildDate><atom:link href="https://wimpysworld.com/categories/development/rss.xml" rel="self" type="application/rss+xml"/><item><title>Fuzzel Colour Picker</title><link>https://wimpysworld.com/posts/fuzzel-hyprpicker/</link><pubDate>Mon, 15 Apr 2024 13:37:42 +0100</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/fuzzel-hyprpicker/</guid><description>&lt;p>We&amp;rsquo;ve all been there - you&amp;rsquo;re knee-deep in customizing your desktop, tweaking configs, perfecting that theme, and suddenly you need to grab a specific colour from somewhere on screen.
If you&amp;rsquo;re like me and recently made the jump to &lt;a href="https://hyprland.org/">Hyprland&lt;/a> (or other contemporary Wayland compositor), you might have found yourself missing some of those handy X11 utilities that &lt;em>&amp;ldquo;just worked&amp;rdquo;&lt;/em> ️™️&lt;/p>
&lt;h2 id="the-wayland-colour-picker-problem">The Wayland Colour Picker Problem&lt;/h2>
&lt;p>When I switched my daily driver to Hyprland back in August 2024, I was chuffed with the smooth animations, efficient tiling, and general polish.
But as with any big change, there were a few splinters in my workflow that needed sorting.&lt;/p>
&lt;p>One particular rough edge was the lack of a proper GUI colour picker.
On X11, I&amp;rsquo;d been spoiled by my mate &lt;a href="https://mastodon.social/@sil">Stuart Langridge&lt;/a>&amp;rsquo;s excellent tool &lt;strong>&lt;a href="https://www.kryogenix.org/code/pick/">Pick&lt;/a>&lt;/strong> - a proper colour picker that did exactly what it said on the tin.
But in Wayland? Well, I was left running &lt;a href="https://github.com/hyprwm/hyprpicker">&lt;code>hyprpicker&lt;/code>&lt;/a> from the terminal like some kind of savage! 😅&lt;/p>
&lt;p class="text-center">
&lt;img src="./hyprpicker.png" class="img-fluid" alt="hyprpicker in the terminal "/>
&lt;br />
&lt;em>hyprpicker in the terminal&lt;/em>
&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong - &lt;code>hyprpicker&lt;/code> works brilliantly for what it is.
But after seeing how well my recent integrations of &lt;a href="https://github.com/e-tho/bzmenu">&lt;strong>bzmenu&lt;/strong>&lt;/a> and &lt;a href="https://github.com/e-tho/iwmenu">&lt;strong>iwmenu&lt;/strong>&lt;/a> worked with &lt;a href="https://codeberg.org/dnkl/fuzzel">Fuzzel&lt;/a>, a lightbulb moment hit me: why not create a proper Fuzzel-based front-end for &lt;code>hyprpicker&lt;/code>? 💡&lt;/p>
&lt;h2 id="birth-of-fuzzel-hyprpicker">Birth of fuzzel-hyprpicker&lt;/h2>
&lt;p>After my second coffee one morning (the optimal programming fuel ☕💪), I decided to tackle this problem head-on.
If I was going to spend hours staring at my &lt;a href="https://catppuccin.com/">Catppuccin Mocha&lt;/a> themed desktop, I needed proper tools to maintain it! ‍🐈‍⬛🎨&lt;/p>
&lt;p>The goal was simple:&lt;/p>
&lt;ul>
&lt;li>Create a Fuzzel-based UI for &lt;code>hyprpicker&lt;/code>&lt;/li>
&lt;li>Maintain persistent colour history&lt;/li>
&lt;li>Make it keyboard-friendly&lt;/li>
&lt;li>Automatcially copy selected colours to clipboard&lt;/li>
&lt;/ul>
&lt;p>The result is &lt;a href="https://github.com/wimpysworld/nix-config/blob/main/home-manager/_mixins/desktop/hyprland/fuzzel/fuzzel-hyprpicker.sh">&lt;code>fuzzel-hyprpicker.sh&lt;/code>&lt;/a> - a little script that brings together the power of &lt;code>hyprpicker&lt;/code> with the elegant UI of Fuzzel.&lt;/p>
&lt;p class="text-center">
&lt;img src="./fuzzel-hyprpicker.png" class="img-fluid" alt="fuzzel-hyprpicker colour selection menu "/>
&lt;br />
&lt;em>fuzzel-hyprpicker showing the colour selection menu&lt;/em>
&lt;/p>
&lt;h2 id="how-it-works">How It Works&lt;/h2>
&lt;p>The magic behind &lt;code>fuzzel-hyprpicker.sh&lt;/code> is surprisingly straightforward.
Let me walk you through the key bits:&lt;/p>
&lt;h3 id="setting-up-the-basics">Setting Up the Basics&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5e5e5">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5e5e5">&lt;/span>&lt;span style="color:#0f0"># A tool to pick colours from the screen using hyprpicker and fuzzel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set +u &lt;span style="color:#0f0"># Disable nounset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">APP_NAME&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;fuzzel-hyprpicker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">NOTIFY&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;notify-desktop --app-name=&lt;/span>&lt;span style="color:#eedd82">$APP_NAME&lt;/span>&lt;span style="color:#87ceeb"> --icon=org.gnome.design.Palette&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0f0"># Set up the storage directory and file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">CONFIG_DIR&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#87ceeb">${&lt;/span>&lt;span style="color:#eedd82">XDG_CONFIG_HOME&lt;/span>&lt;span style="color:#f00">:-&lt;/span>&lt;span style="color:#eedd82">$HOME&lt;/span>/.config&lt;span style="color:#87ceeb">}&lt;/span>&lt;span style="color:#87ceeb">/&lt;/span>&lt;span style="color:#eedd82">$APP_NAME&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">HISTORY_FILE&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$CONFIG_DIR&lt;/span>&lt;span style="color:#87ceeb">/colours.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eedd82">ICONS_DIR&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$CONFIG_DIR&lt;/span>&lt;span style="color:#87ceeb">/icons&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nothing fancy here - we&amp;rsquo;re just setting up our environment, defining where we&amp;rsquo;ll store our colour history, and setting up notifications.
Note that I properly follow the XDG spec here - it&amp;rsquo;s the little things! 😉&lt;/p>
&lt;h3 id="the-clever-bit-svg-icons">The Clever Bit: SVG Icons&lt;/h3>
&lt;p>Here&amp;rsquo;s where things get interesting.
Fuzzel supports icons in its menus, but I needed a way to show colour swatches.
The solution? Dynamically generated SVG files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">function&lt;/span> generate_svg_icon() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local &lt;span style="color:#eedd82">colour&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$1&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local &lt;span style="color:#eedd82">icon_path&lt;/span>=&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$ICONS_DIR&lt;/span>&lt;span style="color:#87ceeb">/&lt;/span>&lt;span style="color:#eedd82">$colour&lt;/span>&lt;span style="color:#87ceeb">.svg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0f0"># Create an SVG for the colour if it doesn&amp;#39;t exist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> [ ! -f &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$icon_path&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span> ]; &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cat &amp;gt; &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$icon_path&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span> &lt;span style="color:#87ceeb">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">&amp;lt;svg width=&amp;#34;128&amp;#34; height=&amp;#34;128&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> &amp;lt;rect width=&amp;#34;128&amp;#34; height=&amp;#34;128&amp;#34; fill=&amp;#34;#$colour&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">&amp;lt;/svg&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m rather pleased with myself for this solution.
Each time you pick a colour, it generates a tiny SVG file that&amp;rsquo;s just a coloured square.
Fuzzel then displays this next to the hex code in the menu. Well done brain! 🧠&lt;/p>
&lt;h3 id="menu-building">Menu Building&lt;/h3>
&lt;p>The menu itself is built dynamically, showing an eyedropper icon for picking a new colour followed by your colour history:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">function&lt;/span> build_menu() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo -e &lt;span style="color:#87ceeb">&amp;#34;Pick a colour\0icon\x1f&lt;/span>&lt;span style="color:#eedd82">$ICONS_DIR&lt;/span>&lt;span style="color:#87ceeb">/eyedropper.svg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0f0"># Add history items if they exist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> [ -s &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$HISTORY_FILE&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span> ]; &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">while&lt;/span> read -r colour; &lt;span style="color:#f00">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0f0"># If the preview icon doesn&amp;#39;t exist, generate it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> [ ! -e &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$ICONS_DIR&lt;/span>&lt;span style="color:#87ceeb">/&lt;/span>&lt;span style="color:#eedd82">$colour&lt;/span>&lt;span style="color:#87ceeb">.svg&amp;#34;&lt;/span> ]; &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generate_svg_icon &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$colour&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0f0"># Display the colour with a preview&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo -e &lt;span style="color:#87ceeb">&amp;#34;#&lt;/span>&lt;span style="color:#eedd82">$colour&lt;/span>&lt;span style="color:#87ceeb">\0icon\x1f&lt;/span>&lt;span style="color:#eedd82">$ICONS_DIR&lt;/span>&lt;span style="color:#87ceeb">/&lt;/span>&lt;span style="color:#eedd82">$colour&lt;/span>&lt;span style="color:#87ceeb">.svg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">done&lt;/span> &amp;lt; &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#eedd82">$HISTORY_FILE&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This uses the &lt;a href="https://github.com/davatorium/rofi">&lt;code>rofi&lt;/code>&lt;/a> &amp;ldquo;protocol&amp;rdquo; for menu items, something Fuzzel has built-in support for 💖
The &lt;code>\0icon\x1f&lt;/code> bit is how you tell Fuzzel &lt;em>&amp;ldquo;hey, use this icon for this menu item&amp;rdquo;&lt;/em>.&lt;/p>
&lt;h3 id="putting-it-all-together">Putting It All Together&lt;/h3>
&lt;p>The full workflow goes like this:&lt;/p>
&lt;ol>
&lt;li>Press &lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>Alt&lt;/kbd> + &lt;kbd>K&lt;/kbd> to open the picker&lt;/li>
&lt;li>Select &lt;strong>&amp;ldquo;Pick a colour&amp;rdquo;&lt;/strong> or choose one from your history&lt;/li>
&lt;li>If picking a new colour, &lt;code>hyprpicker&lt;/code> does it&amp;rsquo;s thing and click anywhere on screen&lt;/li>
&lt;li>The colour gets automatically copied to your clipboard&lt;/li>
&lt;li>A notification appears showing the selected colour&lt;/li>
&lt;/ol>
&lt;p class="text-center">
&lt;img src="./hyprpicker-select.png" class="img-fluid" alt="hyprpicker colour selection "/>
&lt;br />
&lt;em>hyprpicker colour selection&lt;/em>
&lt;/p>
&lt;h2 id="integrating-it-with-your-setup">Integrating It With Your Setup&lt;/h2>
&lt;p>Want to give this a try yourself?
Here&amp;rsquo;s how to adapt it to your wlroots-compatible desktop:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>First, make sure you have the following installed:&lt;/p>
&lt;ul>
&lt;li>&lt;code>hyprpicker&lt;/code>&lt;/li>
&lt;li>&lt;code>fuzzel&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/bugaevc/wl-clipboard">&lt;code>wl-clipboard&lt;/code>&lt;/a> (for clipboard management)&lt;/li>
&lt;li>&lt;a href="https://github.com/nowrep/notify-desktop">&lt;code>notify-desktop&lt;/code>&lt;/a> (for notifications)
&lt;ul>
&lt;li>Although I&amp;rsquo;m planning on switching to &lt;a href="https://codeberg.org/dnkl/fyi">&lt;code>fyi&lt;/code>&lt;/a> soon&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Save the script somewhere in your path (I&amp;rsquo;ve got mine as part of &lt;a href="https://github.com/wimpysworld/nix-config">my Nix configuration&lt;/a>) ️❄️&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make it executable:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod +x fuzzel-hyprpicker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Bind it to a keyboard shortcut in your Hyprland config:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>bind = CTRL ALT, K, exec, fuzzel-hyprpicker.sh
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>Give it a whirl!&lt;/li>
&lt;/ol>
&lt;p>It should work with any wlroots-compatible compositor, not just Hyprland.&lt;/p>
&lt;h2 id="possible-enhancements">Possible Enhancements&lt;/h2>
&lt;p>This is very much a v1 and there&amp;rsquo;s plenty of room for improvement:&lt;/p>
&lt;ul>
&lt;li>Add support for different colour formats (RGB, HSL, etc.)&lt;/li>
&lt;li>Implement colour name lookup&lt;/li>
&lt;li>Create a proper project rather than just a script wedged in my Nix configuration&lt;/li>
&lt;/ul>
&lt;p>But for a morning hack, it&amp;rsquo;s been surprisingly useful!
Reaching for &lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>Alt&lt;/kbd> + &lt;kbd>K&lt;/kbd> brings a smile to my face 😀&lt;/p>
&lt;h2 id="the-joy-of-keyboard-driven-workflows">The Joy of Keyboard-Driven Workflows&lt;/h2>
&lt;p>What I love about tools like this is how they contribute to a cohesive, keyboard-driven workflow.
Between Hyprland&amp;rsquo;s tiling, Waybar&amp;rsquo;s status info, and Fuzzel-based menus for everything from launching apps to picking colours, my fingers rarely stray from the keyboard these days.&lt;/p>
&lt;p>There&amp;rsquo;s something deeply satisfying about crafting your own tools to scratch your own itches.
It&amp;rsquo;s a long held Linux desktop tradition, isn&amp;rsquo;t it?
Taking what works, improving what doesn&amp;rsquo;t, and sharing the results with others.&lt;/p>
&lt;p class="text-center">
&lt;a href="https://linuxmatters.sh" target="_blank">&lt;img src="./hyprland-desktop.png" class="img-fluid" alt="hyprland desktop with fuzzel-hyprpicker "/>&lt;/a>
&lt;br />
&lt;em>My hyprland desktop with fuzzel-hyprpicker in action&lt;/em>
&lt;/p>
&lt;h2 id="more-fuzzel-based-tools">More Fuzzel-Based Tools?&lt;/h2>
&lt;p>I&amp;rsquo;ve created several other Fuzzel menus that integrate with my Hyprland desktop.
I should probably post about those as well - emoji picker and screenshot and screen recording being among my most useful.
Let me know in the comments if you&amp;rsquo;d be interested in seeing those! 👇&lt;/p>
&lt;p>In the meantime, give &lt;code>fuzzel-hyprpicker.sh&lt;/code> a try and let me know what you think.
&lt;strong>And if you improve upon it, &lt;em>please do share your changes!&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The full script is available in my Nix config repository: &lt;a href="https://github.com/wimpysworld/nix-config/blob/main/home-manager/_mixins/desktop/hyprland/fuzzel/fuzzel-hyprpicker.sh">fuzzel-hyprpicker.sh&lt;/a>&lt;/p>
&lt;p>Happy colour picking! 🎨🤏&lt;/p>
&lt;hr>
&lt;p>&lt;em>Have you created any custom tools for your Wayland desktop? Are there any X11 utilities you miss since switching? Let me know in the comments below!&lt;/em>&lt;/p></description><summary>Creating a Proper Colour Picker for Hyprland with Fuzzel</summary></item><item><title>machinespawn</title><link>https://wimpysworld.com/projects/machinespawn/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/machinespawn/</guid><description>&lt;p>&lt;a href="https://github.com/wimpysworld/machinespawn">machinespawn&lt;/a> is a wrapper for
&lt;code>machinectl&lt;/code> and &lt;code>systemd-nspawn&lt;/code> to creating and managing containers; primarily
focused at local development environment and CI/CD with a heavy emphasis on
caching.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://github.com/wimpysworld/machinespawn">machinespawn&lt;/a>&lt;/li>
&lt;li>Date: October 2022 - date&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>Quickly stand up systemd-nspawn containers for development or CI/CD</summary></item><item><title>deb-get</title><link>https://wimpysworld.com/projects/deb-get/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/deb-get/</guid><description>&lt;p>&lt;a href="https://github.com/wimpysworld/deb-get">deb-get&lt;/a> makes it easy to install and
update .debs published in 3rd party apt repositories or made available via
direct download on websites or GitHub release pages.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://github.com/wimpysworld/deb-get">deb-get&lt;/a>&lt;/li>
&lt;li>Date: April 2022 - date&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>apt-get functionality for .debs published in GitHub release or 3rd party repositories</summary></item><item><title>Creating Production-Ready Containers - Advanced Techniques</title><link>https://wimpysworld.com/posts/creating-production-ready-containers-advanced-techniques/</link><pubDate>Fri, 18 Jun 2021 12:18:15 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/creating-production-ready-containers-advanced-techniques/</guid><description>&lt;p>Creating production-ready containers for use in commercial-grade apps can be a far cry from the &amp;ldquo;get started with Node.js and Docker&amp;rdquo;-type of tutorials that are common around the Internet. Those guides are great for introducing all the advantages of Docker containers in modern cloud-native development, but creating a container that passes muster in a large-scale application in production is a different story.&lt;/p>
&lt;p>For production-ready containers, there are three key things you want to optimise for when creating a container:&lt;/p>
&lt;ol>
&lt;li>Image Size 📦&lt;/li>
&lt;li>Build Speed 🐢&lt;/li>
&lt;li>Security 🔐&lt;/li>
&lt;/ol>
&lt;p>Image size and build speed ensure that your containers can move through CI/CD and test pipelines easily and efficiently. Security is critical in today&amp;rsquo;s software supply chain, and containers have their own set of security issues. Thankfully, reducing container image size actually can alleviate some security issues in containers.&lt;/p>
&lt;p>&lt;a href="https://wimpysworld.com/posts/creating-production-ready-containers-the-basics">In my Basics article&lt;/a>, I showed you some easy techniques to improve your &lt;code>Dockerfile&lt;/code> using a sample &amp;ldquo;Hello World&amp;rdquo; Node.js application.&lt;/p>
&lt;p>These basics address all three optimisations, though they only scratch the surface.&lt;/p>
&lt;p>Let&amp;rsquo;s look at some more advanced techniques for Container Optimisation.&lt;/p>
&lt;h2 id="alpine-images">Alpine Images&lt;/h2>
&lt;p>The very first thing you&amp;rsquo;ll encounter when looking for techniques to create smaller containers is &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a>. Alpine Linux is an open-source project whose goal is to create a bare-bones 🦴 version of Linux that lets developers &amp;ldquo;build from the ground up.&amp;rdquo;&lt;/p>
&lt;h3 id="pros-transitioning-to-alpine-can-be-an-easy-way-to-get-a-smaller-container">Pros: Transitioning to Alpine can be an easy way to get a smaller container&lt;/h3>
&lt;p>Reducing image size with Alpine can be incredibly simple - under the right circumstances. For some apps, it&amp;rsquo;s as easy as changing the base image in your &lt;code>Dockerfile&lt;/code>:&lt;/p>
&lt;h4 id="from">FROM&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.2.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="to">TO&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.2.0-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we build the new image, we see that the old image was 856MB and the new one is 114MB 🎉&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cotw-node-alpine latest 2cc7b4a7b09c 2 minutes ago 114MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cotw-node latest 873fb9fca53a 3 days ago 856MB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy, right? Not so fast.&lt;/p>
&lt;h3 id="cons-using-alpine-images-can-lead-to-build-problems-now-and-in-the-future">Cons: Using Alpine images can lead to build problems, now and in the future&lt;/h3>
&lt;p>There are some not-so-obvious gotchas with using Alpine images that don&amp;rsquo;t crop up in our super simple example application, such as:&lt;/p>
&lt;h4 id="you-have-to-install-everything">You have to install everything&lt;/h4>
&lt;p>Those tiny base images have to sacrifice something, right? Alpine users will be installing everything they need, right down to time-zone data or development tools. You won&amp;rsquo;t need your development tools for your production image, most likely, but for most developers, the thought of a server without &lt;code>curl&lt;/code> or &lt;code>vim&lt;/code> is a bridge too far.&lt;/p>
&lt;h4 id="different-compilers-and-package-managers">Different compilers and package managers&lt;/h4>
&lt;p>You&amp;rsquo;ll also be installing any dependencies with the Alpine Package Keeper tool (&lt;code>apk&lt;/code>) instead of the more familiar &lt;code>apt&lt;/code> or &lt;code>rpm&lt;/code>. The differences are small but can trip up unsuspecting developers.&lt;/p>
&lt;h4 id="fewer-examples-less-documentation">Fewer examples; less documentation&lt;/h4>
&lt;p>Finally, while Alpine has been around for nine-plus years, it is and likely always will be a smaller and more specialised user base than established Linux distributions such as Ubuntu and Debian. To wit, at the time of this writing the &lt;code>alpine&lt;/code> tag on StackOverflow has just &lt;a href="https://stackoverflow.com/questions/tagged/alpine">1,280 questions&lt;/a>, compared with &lt;a href="https://stackoverflow.com/questions/tagged/ubuntu">over 54,000 for Ubuntu&lt;/a>.&lt;/p>
&lt;h2 id="multi-stage-builds">Multi-stage builds&lt;/h2>
&lt;p>The next tactic you are likely to encounter when searching for ways to reduce Docker image sizes is multi-stage 🏗 builds. This tactic, &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/">recommended by Docker and many in the Docker community&lt;/a>, is essentially building the image twice. The first set of commands builds your base application image, all things included. The second set of commands builds an image off of that base image, taking only what&amp;rsquo;s needed and leaving out anything that&amp;rsquo;s not.&lt;/p>
&lt;p>With a multi-stage build, our &lt;code>Dockerfile&lt;/code> would look like this. Notice the two &lt;code>FROM&lt;/code> statements. The first builds the application image; the second copies the necessary files from that image into the second, more production-ready version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.2.0-alpine as builder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.2.0-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> --from=builder /usr/src/app .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">USER&lt;/span>&lt;span style="color:#87ceeb"> node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">CMD&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>,&lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pros-dev-and-prod-images-can-be-built-separately">Pros: Dev and Prod images can be built separately&lt;/h3>
&lt;p>When combined with &lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a>, this approach gives developers a flexible development environment while reducing bloat in the production images. You can simply use your initial image for dev/test and the final version for production. Multi-stage builds work especially well for Go containers, significantly reducing image size, but also work well for static Node.js and React-type applications.&lt;/p>
&lt;h3 id="cons-added-complexity-use-case-specific">Cons: Added complexity; use-case specific&lt;/h3>
&lt;p>Multi-stage builds are still relatively new 🌱 on the scene. For most developers still new to containers, knowing what to copy over to the final production image and what to leave behind is a major barrier to entry. Further, this pattern can run into challenges.&lt;/p>
&lt;p>Since we&amp;rsquo;re already using an Alpine image, the size savings are relatively minor for our &amp;ldquo;Hello World&amp;rdquo; example. You&amp;rsquo;d expect to see greater gains in a full-blown React or Vue application.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cotw-node-multistage latest 52bc33d14a87 3 minutes ago 114MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cotw-node-alpine latest 2cc7b4a7b09c 4 days ago 114MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cotw-node latest 873fb9fca53a 7 days ago 856MB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="development-tools-and-distroless">Development tools and Distroless&lt;/h2>
&lt;p>There are several tools - and new ones emerging every day - that look to bypass or automate &lt;code>Dockerfile&lt;/code> authoring to make image creation easier. &lt;a href="https://buildpacks.io/">&lt;em>Buildpacks&lt;/em>&lt;/a> are the most mature of these technologies and can be used through tools like &lt;a href="https://buildpacks.io/docs/tools/pack/">Pack&lt;/a> or &lt;a href="https://www.waypointproject.io/plugins/pack">Waypoint&lt;/a>.&lt;/p>
&lt;p>There are builder options from multiple sources - Heroku, Google, and Paketo are common favourites - and each gives you a slightly different developer experience and final image when used.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pack build cotw-node-bp-google --builder gcr.io/buildpacks/builder:v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pack build cotw-node-bp-heroku --builder heroku/buildpacks:18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pack build cotw-node-bp-pb-base --builder paketobuildpacks/builder:base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pack build cotw-node-bp-pb-full --builder paketobuildpacks/builder:full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pros-when-they-work-they-work">Pros: When they work, they work&lt;/h3>
&lt;p>In certain instances, Buildpacks can take the pain out of &lt;code>Dockerfile&lt;/code> authoring and just create container images of your application with no fuss. The pack tool is looking for &amp;ldquo;app-like&amp;rdquo; files in your source directory, and automatically figuring out what kind of application is there and how to containerize it. In the case of our Node sample, it sees &lt;code>package.json&lt;/code> and correctly assumes we have a Node.js application.&lt;/p>
&lt;h3 id="cons-when-they-dont">Cons: When they don&amp;rsquo;t…&lt;/h3>
&lt;p>Given the relative newness of this approach for Docker containers, there are a lot of gotchas with Buildpacks. Non-standard applications or operating systems can struggle, and we&amp;rsquo;ve had issues running them successfully on the new Silicon Macbook Pros. The resulting images vary a lot - we saw a range of 200MB to 800MB in our examples - and the results tend to be lower than what you&amp;rsquo;d get with other techniques.&lt;/p>
&lt;h2 id="automate-it-with-slimtoolkit">Automate it with SlimToolKit&lt;/h2>
&lt;p>The &lt;a href="https://slimtoolkit.org/">SlimToolKit&lt;/a> (&lt;em>formerly DockerSlim&lt;/em>) open-source project was created by &lt;a href="https://slim.ai">Slim.AI&lt;/a> CTO &lt;a href="https://twitter.com/kcqon">Kyle Quest&lt;/a> in 2015 as a way to automate container optimisation. Simply download and run &lt;code>slim build &amp;lt;myimage&amp;gt;&lt;/code> and SlimToolKit will examine the image, rebuild it with only the required dependencies, and give you a new image that can be run just like the original.&lt;/p>
&lt;h3 id="pros-its-automatic">Pros: It&amp;rsquo;s automatic&lt;/h3>
&lt;p>SlimToolKit means you can work with whatever base image you&amp;rsquo;d like (say, Ubuntu or Debian) and let SlimToolKit worry about removing unnecessary tools and files en route to production. The best part is that SlimToolKit can be used alongside any of these other techniques. Once tested, it can be integrated into your CI/CD pipeline for automatic container minification, and the reduction in size leads to faster build times and better security.&lt;/p>
&lt;h3 id="cons-steep-learning-curve">Cons: Steep learning curve&lt;/h3>
&lt;p>As with any open-source software, SlimToolKit can take some time to get working, especially for non-trivial applications. It works best for web-style applications, micro-services and APIs that have defined HTTP/HTTPS ports which the sensor can find and use to observe the container internals.&lt;/p>
&lt;p>For best results, spend some time getting to know the various command flags available to tune your image, and &lt;a href="https://github.com/slimtoolkit/examples">take a look at the examples for whatever framework you&amp;rsquo;re using&lt;/a>.&lt;/p>
&lt;h2 id="connecting-with-slimtoolkit">Connecting with SlimToolKit&lt;/h2>
&lt;p>There&amp;rsquo;s an &lt;a href="https://discord.gg/uBttmfyYNB">active Slim.AI Discord channel&lt;/a> full of experts who can help you triage issues as they arise.&lt;/p></description><summary>Advanced techniques for production-ready container best practice</summary></item><item><title>Creating Production-Ready Containers - The Basics</title><link>https://wimpysworld.com/posts/creating-production-ready-containers-the-basics/</link><pubDate>Thu, 03 Jun 2021 12:18:15 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/creating-production-ready-containers-the-basics/</guid><description>&lt;p>So you&amp;rsquo;ve coded an awesome app and you are ready to deploy it to the cloud. You&amp;rsquo;ve heard a lot about &lt;a href="https://www.docker.com/">Docker&lt;/a> and completed a few online tutorials to containerise your app. All set, right? But what do you need to know if you&amp;rsquo;re going to move that app to a production environment on the public Internet? What if you&amp;rsquo;re using it for your job and need to pass security scans and DevOps checks?&lt;/p>
&lt;p>In this series, I introduce some basic concepts for making production-ready containers. I also introduce the concept of &amp;ldquo;slimming&amp;rdquo; a container. &lt;strong>Slimming&lt;/strong> refers to both optimising and minifying your Docker containers, reducing them in size by up to 80-percent while also making them more secure by decreasing the attack surface. Slimming your container is also a great way to implement &lt;a href="https://www.slim.ai/blog/why-dont-we-practice-container-best-practices">container best practices&lt;/a> without re-engineering your entire workflow.&lt;/p>
&lt;p>There are many ways to slim a container, from basic security to fully automated open-source tools like &lt;a href="https://slimtoolkit.org/">SlimToolKit&lt;/a> (formerly &lt;a href="https://dockersl.im/">DockerSlim&lt;/a>). &lt;em>Full disclosure&lt;/em>: I used work for &lt;a href="https://slim.ai">Slim.AI&lt;/a>, a company founded on the SlimToolKit open source project. Let&amp;rsquo;s look at some of the common ways developers create production-ready container images today.&lt;/p>
&lt;p>I&amp;rsquo;ll explore each of these in a separate article using a simple &amp;ldquo;Hello World&amp;rdquo; Node.js example that can be found in many online tutorials.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">const&lt;/span> express = require(&lt;span style="color:#87ceeb">&amp;#39;express&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">const&lt;/span> app = express()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">const&lt;/span> port = &lt;span style="color:#f60">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#87ceeb">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.send(&lt;span style="color:#87ceeb">&amp;#39;Hello World!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.listen(port, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#87ceeb">`Example app listening at http://localhost:&lt;/span>&lt;span style="color:#87ceeb">${&lt;/span>port&lt;span style="color:#87ceeb">}&lt;/span>&lt;span style="color:#87ceeb">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s get started by simply improving your &lt;code>Dockerfile&lt;/code> to build a better Docker image.&lt;/p>
&lt;h2 id="creating-a-better-dockerfile">Creating a Better Dockerfile&lt;/h2>
&lt;p>Most &lt;code>Dockerfile&lt;/code> examples you&amp;rsquo;ll find are not &amp;ldquo;production ready&amp;rdquo; and they aren&amp;rsquo;t meant to be. They are for instructional purposes to help developers successfully build an image. But when one gets into production scenarios, there are several &amp;ldquo;good-to-know&amp;rdquo; and a few &amp;ldquo;have-to-know&amp;rdquo; techniques that will improve build times, security, and reliability.&lt;/p>
&lt;p>Let&amp;rsquo;s look at a typical example that you might run into if you&amp;rsquo;re a Node.js developer looking to get &amp;ldquo;Hello World&amp;rdquo; running with Docker. I won&amp;rsquo;t go through building an actual app - there are a lot of great examples out there to show you how to do this - but rather focus on what to do if you were going to ship this to production.&lt;/p>
&lt;p>The typical &lt;code>Dockerfile&lt;/code> in a &amp;ldquo;Hello World&amp;rdquo; example might look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">CMD&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It uses the latest version of the official Node.js image, sets a directory and copies your app into the container image, installs dependencies, exposes port 3000, and runs the app via &lt;code>CMD&lt;/code>.&lt;/p>
&lt;p>While this will run no problem on your local machine, and is great for learning the ropes, this approach is almost certainly going to run into issues when you ship it to production. Let&amp;rsquo;s take a look at some of these in order of severity.&lt;/p>
&lt;h3 id="major-issues">Major issues&lt;/h3>
&lt;h4 id="running-as-root">Running as Root&lt;/h4>
&lt;p>Since this example doesn&amp;rsquo;t set a &lt;code>USER&lt;/code> explicitly in the &lt;code>Dockerfile&lt;/code>, Docker runs the build and all commands as the &lt;code>root&lt;/code> user. While not an issue for local development, your friendly neighbourhood SysAdmin will tell you the myriad of issues that come with running applications as root on a server in production. And with Docker, a &lt;a href="https://medium.com/jobteaser-dev-team/docker-user-best-practices-a8d2ca5205f4">new set of attack methods&lt;/a> can arise.&lt;/p>
&lt;p>Thankfully, most major languages and frameworks have a predefined user for running applications. In Node.js, the user is just &lt;code>node&lt;/code> and can be invoked in the &lt;code>Dockerfile&lt;/code> explicitly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">USER&lt;/span>&lt;span style="color:#87ceeb"> node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">CMD&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="using-latest-version">Using &lt;code>latest&lt;/code> version&lt;/h4>
&lt;p>Choosing a version number for your container is often called &lt;em>pinning&lt;/em>. While many tutorials - and even some experts - will counsel newcomers to pin their images to the &lt;code>latest&lt;/code> tag, which means you get whatever the most recently updated version is, using the &lt;code>latest&lt;/code> tag can cause issues in production.&lt;/p>
&lt;p>Containers are meant to be ephemeral, meaning they can be created, destroyed, started, stopped, and reproduced with ease and &lt;em>reliability&lt;/em>. Using the &lt;code>latest&lt;/code> tag means there isn&amp;rsquo;t a single source of truth for your container&amp;rsquo;s &amp;ldquo;bill of materials&amp;rdquo;. A new version or update of a dependency could introduce a breaking change, which may cause the build to fail somewhere in your CI/CD pipeline.&lt;/p>
&lt;p>&lt;strong>Example &lt;code>Dockerfile&lt;/code>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:latest&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Production &lt;code>Dockerfile&lt;/code>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.2.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Other tutorials I&amp;rsquo;ve seen pin only the major version. For example, using &lt;code>node:14&lt;/code>. This carries the same risks as using &lt;code>latest&lt;/code>, as minor versions can change dependencies as well.&lt;/p>
&lt;p>Now, pinning a specific major and minor version in your &lt;code>Dockerfile&lt;/code> is a trade-off decision - you&amp;rsquo;re choosing to not automatically receive security, fixes or performance improvements that come via new updates - but most DevSecOps teams prefer to employ security scanning and container management software as a way to control updates rather than dealing with the unpredictability that comes with container build failures in production CI/CD pipelines.&lt;/p>
&lt;h3 id="performance-improvements">Performance improvements&lt;/h3>
&lt;h4 id="better-layer-caching">Better layer caching&lt;/h4>
&lt;p>Docker works on the concept of &lt;em>layer caching&lt;/em>. It builds images sequentially. Layering dependencies on top of each other and only rebuilding them when something in the layer has changed.&lt;/p>
&lt;p>Layer 0 in a Docker image is often the base operating system, which rarely changes significantly; although commercial Linux vendors often publish new base images to incorporate security fixes.&lt;/p>
&lt;p>Application code, however, is highly likely to change during the software development cycle, as you iterate on features, refactor, and fix bugs. Dependencies in our core system, installed here by &lt;code>npm install&lt;/code>, change more often than the base OS, but less often than the application code.&lt;/p>
&lt;p>In our example &lt;code>Dockerfile&lt;/code>, we simply need to break the installation of the dependencies into separate instructions on their own lines.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">USER&lt;/span>&lt;span style="color:#87ceeb"> node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">CMD&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We actually end up creating another layer by now having two &lt;code>COPY&lt;/code> commands. While adding layers is typically a no-no for build times and image sizes, the tax we pay on this optimisation is going to save us in the long run as we cycle through the QA process, since we aren&amp;rsquo;t reinstalling dependencies if we don’t have to.&lt;/p>
&lt;p>We also opt for the &lt;code>npm ci&lt;/code> command instead of &lt;code>npm install&lt;/code>, which is preferred for automated environments, such as CI/CD, and will help prevent breaking changes from dependencies. Read &lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-ci">more about &lt;code>npm ci&lt;/code> here&lt;/a>.&lt;/p>
&lt;h4 id="use-entrypoint-instead-of-cmd">Use &lt;code>ENTRYPOINT&lt;/code> instead of &lt;code>CMD&lt;/code>&lt;/h4>
&lt;p>At a surface level, there isn&amp;rsquo;t a big difference between using &lt;code>ENTRYPOINT&lt;/code> with your app file versus running &lt;code>CMD&lt;/code> using the shell plus your app file. However, web- and API-type containers like Node.js applications are often running as executables in production, and there, proper signal handling - such as graceful shutdowns - are important.&lt;/p>
&lt;p>&lt;code>CMD&lt;/code> provides some flexibility for calling executables with flags or overwriting them, which is common in development. But that generally won&amp;rsquo;t be relevant to production instances and &lt;code>ENTRYPOINT&lt;/code> will likely provide better signal processing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">USER&lt;/span>&lt;span style="color:#87ceeb"> node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">ENTRYPOINT&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cleaning-up-cached-files">Cleaning up cached files&lt;/h3>
&lt;p>Most package managers have the ability to clean up their own cache. If you don’t do this, you&amp;rsquo;ll just be moving a bunch of unused files into your container for no reason. It might not save a lot of space depending on your application, but think of it as dropping your unused items at the charity shop &lt;em>before&lt;/em> you move rather than loading them in the moving van. It&amp;rsquo;s not a lot of effort and it&amp;rsquo;s the right thing to do. We do this by adding &lt;code>&amp;amp;&amp;amp; npm cache clean --force&lt;/code> to our &lt;code>RUN&lt;/code> instruction.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">FROM&lt;/span>&lt;span style="color:#87ceeb"> node:16.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">WORKDIR&lt;/span>&lt;span style="color:#87ceeb"> /usr/src/app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> package*.json ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">RUN&lt;/span> npm ci &amp;amp;&amp;amp; npm cache clean --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">USER&lt;/span>&lt;span style="color:#87ceeb"> node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">COPY&lt;/span> app.js ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">EXPOSE&lt;/span>&lt;span style="color:#87ceeb"> 3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">ENTRYPOINT&lt;/span> [&lt;span style="color:#87ceeb">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#87ceeb">&amp;#34;app.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conclusions">Conclusions&lt;/h3>
&lt;p>Improving your &lt;code>Dockerfile&lt;/code> is the first step towards creating a slimmed and optimised container. It closes some major security loopholes that are likely to raise flags with downstream checks and adds baseline optimisations for build time and docker image size.&lt;/p>
&lt;p>If this is all you do to improve your containers prior to shipping to production, you won&amp;rsquo;t be in a bad spot, but there&amp;rsquo;s more - &lt;em>way more&lt;/em> - that you can do to optimise images. We&amp;rsquo;ll &lt;a href="https://wimpysworld.com/posts/creating-production-ready-containers-advanced-techniques/">explore those techniques in the next article&lt;/a>.&lt;/p></description><summary>Beginners guide to container best practices</summary></item><item><title>Retro Home</title><link>https://wimpysworld.com/projects/retro-home/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/retro-home/</guid><description>&lt;p>&lt;a href="https://github.com/wimpysworld/retro-home">Retro Home&lt;/a> is custom Raspberry Pi
operating system purpose built for retro gaming. Built with
&lt;a href="https://ubuntu.com/">Ubuntu&lt;/a> and using the minimalist emulator frontend
&lt;a href="https://ludo.libretro.com/">Ludo&lt;/a> it supports most classic consoles from Atari,
Nintendo, Sega and SNK along with arcade emulation support. A number of retro
styled Raspberry Pi cases from &lt;a href="https://retroflag.com/">Retroflag&lt;/a> and
&lt;a href="https://www.waveshare.com/product/raspberry-pi/portable-gaming.htm">Waveshare&lt;/a>
are supported (with more in the works) using bespoke GPIO drivers.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://github.com/wimpysworld/retro-home">Retro Home&lt;/a>&lt;/li>
&lt;li>Date: July 2020 - date&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>A retro-gaming operating system for Raspberry Pi built with Ubuntu and Ludo</summary></item><item><title>Rolling Rhino</title><link>https://wimpysworld.com/projects/rolling-rhino/</link><pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/rolling-rhino/</guid><description>&lt;p>Simple shell script to convert Ubuntu into a &lt;em>&amp;ldquo;rolling release&amp;rdquo;&lt;/em> that tracks the
&lt;code>devel&lt;/code> series; &lt;strong>for the toughest of Ubuntu users&lt;/strong>.&lt;/p>
&lt;p>This project has served its purpose. It inspired another group of developers to
create a &lt;a href="https://rollingrhino.org/">fully fledged Ubuntu Rolling Rhino distro&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://github.com/wimpysworld/rolling-rhino">Rolling Rhino&lt;/a>&lt;/li>
&lt;li>Date: March 2020 - November 2022&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>Convert Ubuntu into a rolling release</summary></item><item><title>Quickemu</title><link>https://wimpysworld.com/projects/quickemu/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/quickemu/</guid><description>&lt;p>Quickly create and run highly optimised desktop virtual machines for Linux,
macOS and Windows; with just two commands. You decide what operating system you
want to run and &lt;a href="https://github.com/quickemu-project/quickemu">Quickemu&lt;/a> will figure out the best way to do it for you&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://github.com/quickemu-project">Quickemu Project&lt;/a>&lt;/li>
&lt;li>Date: March 2020 - date&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>Quickly create and run optimised Windows, macOS and Linux virtual machines</summary></item><item><title>Debian</title><link>https://wimpysworld.com/projects/debian/</link><pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/debian/</guid><description>&lt;p>Debian is a Unix-like computer operating system and a Linux distribution that is
composed entirely of free and open-source software, most of which is under the
GNU General Public License, and packaged by a group of individuals known as the
Debian Project.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://debian.org">Debian Project&lt;/a>&lt;/li>
&lt;li>Date: October 2014 - date&lt;/li>
&lt;li>Role: Package maintainer&lt;/li>
&lt;/ul></description><summary>Package maintainer for (mostly) MATE Desktop in Debian and Ubuntu</summary></item><item><title>Ubuntu MATE</title><link>https://wimpysworld.com/projects/ubuntu-mate/</link><pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/ubuntu-mate/</guid><description>&lt;p>A community developed Ubuntu based operating system that beautifully integrates
the &lt;a href="https://mate-desktop.org">MATE desktop&lt;/a>. Ubuntu MATE is a stable,
easy-to-use operating system with a configurable desktop environment and is
suitable for modern workstations, laptops, single board computers and older
hardware alike.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://ubuntu-mate.org">Ubuntu MATE Project&lt;/a>&lt;/li>
&lt;li>Date: June 2014 - date&lt;/li>
&lt;li>Role: Project Lead&lt;/li>
&lt;/ul></description><summary>Ubuntu MATE is a Linux distribution I made for my friends and family</summary></item><item><title>openSUSE</title><link>https://wimpysworld.com/projects/opensuse/</link><pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/opensuse/</guid><description>&lt;p>Mentored three students for the &lt;a href="https://www.google-melange.com/gsoc/org2/google/gsoc2014/opensuse">openSUSE 2014 Google Summer of Code&lt;/a>.
All three students successfully completed their projects for the
&lt;a href="https://mate-desktop.org">MATE Desktop&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="http://www.opensuse.org">openSUSE&lt;/a>&lt;/li>
&lt;li>Date: February 2014 - August 2014&lt;/li>
&lt;li>Role: Student mentor&lt;/li>
&lt;/ul></description><summary>Student mentor for Google Summer of Code 2014</summary></item><item><title>Arch Linux</title><link>https://wimpysworld.com/projects/arch-linux/</link><pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/arch-linux/</guid><description>&lt;p>&lt;a href="https://archlinux.org">Arch Linux &lt;/a> is a Linux distribution that uses a rolling
release model, such that a regular system update is all that is needed to obtain
all the latest software. The design approach follows the KISS principle
(&lt;i>&amp;ldquo;keep it simple, stupid&amp;rdquo;&lt;/i>) and focuses on elegance, code correctness,
minimalism and simplicity.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://archlinux.org">Arch Linux &lt;/a>&lt;/li>
&lt;li>Date: December 2013 - December 2016&lt;/li>
&lt;li>Role: Trusted user &amp;amp; Package maintainer&lt;/li>
&lt;/ul></description><summary>Arch Linux Trusted User &amp;amp; Package maintainer</summary></item><item><title>Python Distributions</title><link>https://wimpysworld.com/posts/python-distributions/</link><pubDate>Mon, 24 Jun 2013 13:11:43 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/python-distributions/</guid><description>&lt;p>At &lt;a href="http://www.flightdataservices.com">work&lt;/a> I maintain the
&lt;a href="http://http://jenkins-ci.org/">Jenkins&lt;/a> test and build servers. I&amp;rsquo;m just about
to update our Windows build servers and thought I&amp;rsquo;d better check the available
&amp;ldquo;Python Distributions&amp;rdquo; to see if our current choice (the brilliant
&lt;a href="https://code.google.com/p/pythonxy/">Python(x,y)&lt;/a> is still the most suitable for
our needs.&lt;/p>
&lt;p>Our &lt;a href="http://github.com/FlightDataServices">Flight Data Analyzer&lt;/a> makes extensive
use of &lt;a href="http://www.numpy.org/">Numpy&lt;/a>, &lt;a href="http://www.scipy.org/">Scipy&lt;/a>,
&lt;a href="http://code.google.com/p/h5py/">h5py&lt;/a> and other analysis tools. So, pre-built
Python distributions on Windows save me a lot of &lt;del>pain&lt;/del> time. On Linux we roll
our own of course.&lt;/p>
&lt;p>What follows is a list of Python Distributions that include Python and the essential
modules we require.&lt;/p>
&lt;h2 id="anaconda">Anaconda&lt;/h2>
&lt;blockquote>
&lt;p>Completely free enterprise-ready Python distribution for large-scale data
processing, predictive analytics, and scientific computing.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://store.continuum.io/cshop/anaconda/">https://store.continuum.io/cshop/anaconda/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Heard about this for the first time a couple of days ago. It looks very promising
with 32-bit and 64-bit flavours and MKL optimised modules are available from the
reasonably priced Anaconda Accelerate. While I roll my own Python Distribution for
our Linux build servers, I am rather taken with the idea of using Anaconda on Linux
and Windows to provide a consistent platform everywhere. I&amp;rsquo;m looking forward to
testing Anaconda this week.&lt;/p>
&lt;p>&lt;a href="http://www.continuum.io">Continuum&lt;/a> appear to be taking on Enthought at their
own game, and good luck to them as they have some really interesting projects
on the go.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.continuum.io/developer-resources">http://www.continuum.io/developer-resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="enthought-canopy">Enthought Canopy&lt;/h2>
&lt;blockquote>
&lt;p>Enthought Canopy is a comprehensive Python analysis environment with easy
installation &amp;amp; updates of the proven Enthought Python distribution - all part
of a robust platform you can explore, develop and visualize on.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.enthought.com/products/canopy/">https://www.enthought.com/products/canopy/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We used to use Entought EPD and Canopy builds on EPD. However, we decided to
switch from EPD and consolidate analyst workstation and build server deployments
around Python(x,y).&lt;/p>
&lt;p>There were several factors to this decision, but the main issue was that updates
to the EPD package repositories were slow for some essential modules we use. Canopy
seems to have inherited package latency from EPD as Numpy is still at 1.6.1 while
we now require Numpy 1.7.&lt;/p>
&lt;p>Paid versions of Canopy have MKL optimizations and 64-bit platform support.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.enthought.com/products/canopy/compare-subscriptions/">https://www.enthought.com/products/canopy/compare-subscriptions/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="pythonxy">Python(x,y)&lt;/h2>
&lt;blockquote>
&lt;p>Scientific-oriented Python Distribution based on Qt and Spyder.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://code.google.com/p/pythonxy/">https://code.google.com/p/pythonxy/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This is what we currently use for Windows build servers and analyst workstations.
The only reason I&amp;rsquo;m conisdering switching is that is it 32-bit only. Other than
that, I love it and highly recommend it. Python(x,y) doesn&amp;rsquo;t offer MKL optimisations.&lt;/p>
&lt;h2 id="winpython">WinPython&lt;/h2>
&lt;blockquote>
&lt;p>WinPython is a portable scientific Python 2/3 32/64bit distribution for Windows&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="http://code.google.com/p/winpython/">http://code.google.com/p/winpython/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>From the same stable as Python(x,y) but has 32-bit and 64-bit flavours, yummy.
WinPython includes everything I need so will definately get fully tested this week.&lt;/p>
&lt;h2 id="portable-python">Portable Python&lt;/h2>
&lt;blockquote>
&lt;p>Portable Python is a Python programming language pre-configured to run directly
from any USB storage device, enabling you to have, at any time, a portable
programming environment.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="http://portablepython.com/">http://portablepython.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Not looked at this in any real detail. Appears to be 32-bit only but does include
a number of essential packages.&lt;/p>
&lt;h2 id="unofficial-windows-binaries-for-python-extension-packages">Unofficial Windows Binaries for Python Extension Packages&lt;/h2>
&lt;blockquote>
&lt;p>Provides 32- and 64-bit Windows binaries of many scientific open-source extension
packages for the official CPython distribution of the Python programming language.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>OK, so this is not a Python distribution but it is compelling. 32-bit and 64-bit
platforms are catered for and MKL optimizations are available at no cost. Each
package needs to be installed individually, which can be seen as both good and bad.
Good because you only install what you actually require and bad because the initial
installation is protracted. That said, it is on my evaluation list for this week.&lt;/p>
&lt;h2 id="anymore">Anymore?&lt;/h2>
&lt;p>Those are the Python Distributions I&amp;rsquo;m aware of. Are there any others I should
consider?&lt;/p></description><summary>A selection of Python distributions for data analysis</summary></item><item><title>Python and virtualenv on Arch Linux and Ubuntu</title><link>https://wimpysworld.com/posts/python-and-virtualenv-on-arch-linux-and-ubuntu/</link><pubDate>Tue, 11 Dec 2012 20:38:50 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/python-and-virtualenv-on-arch-linux-and-ubuntu/</guid><description>&lt;p>We use &lt;a href="http://www.python.org">Python&lt;/a> for pretty much all our software
development at &lt;a href="http://www.flightdataservices.com/">work&lt;/a>. We also use
&lt;a href="http://www.virtualenv.org">virtualenv&lt;/a> and
&lt;a href="http://www.doughellmann.com/projects/virtualenvwrapper/">virtualenvwrapper&lt;/a>
extensively, both for development &lt;em>and&lt;/em> deployment.&lt;/p>
&lt;h2 id="why-is-virtualenv-so-great">Why is virtualenv so great?&lt;/h2>
&lt;p>It just is. Read the &lt;a href="http://www.virtualenv.org/en/latest/">virtualenv documentation&lt;/a>.
If you&amp;rsquo;re a Python developer you need &lt;code>virtualenv&lt;/code> in your life. You also need
&lt;code>virtualenvwrapper&lt;/code> too.&lt;/p>
&lt;blockquote>
&lt;p>virtualenvwrapper is a set of extensions to Ian Bicking’s virtualenv tool
for creating isolated Python development environments.&lt;/p>
&lt;/blockquote>
&lt;h2 id="installing-python-and-virtualenvwrapper">Installing Python and virtualenvwrapper&lt;/h2>
&lt;p>Outlined below is how I install Python and &lt;code>virtualenvwrapper&lt;/code>. We have not
yet made the jump to Python 3 at work, hence the references to Python 2.6 and
2.7. Some of us develop on Arch Linux, but all deployments are on Ubuntu.&lt;/p>
&lt;h3 id="arch-linux">Arch Linux&lt;/h3>
&lt;p>As Arch Linux is a rolling release we can simply install everything via
&lt;code>pacman&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo pacman -Syy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pacman -S --needed --noconfirm python-pip python-setuptools python-virtualenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pacman -S --needed --noconfirm python2-pip python2-setuptools python2-virtualenv python-virtualenvwrapper&lt;span style="color:#87ceeb">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple.&lt;/p>
&lt;h3 id="ubuntu">Ubuntu&lt;/h3>
&lt;p>The following was done on Ubuntu Lucid 10.04 LTS.&lt;/p>
&lt;p>Add some essential PPAs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:bzr/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:git-core/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:fkrull/deadsnakes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Update the system and install Python 2.6 and 2.7.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install libpython2.6 python2.6 python2.6-dev python2.6-minimal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install libpython2.7 python2.7 python2.7-dev python2.7-minimal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove any &lt;code>apt&lt;/code> installed Python packages that we are about to repalce. The
versions of these packages in the Ubuntu repos and PPAs are too old.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get purge python-setuptools python-virtualenv python-pip python-profiler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install &lt;code>distribute&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -O http://python-distribute.org/distribute_setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo python2.6 distribute_setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo python2.7 distribute_setup.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install &lt;code>pip&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo python2.6 get-pip.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo python2.7 get-pip.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;code>pip&lt;/code> to install &lt;code>virtualenv&lt;/code> and &lt;code>virtualenv&lt;/code> wrapper.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo pip-2.6 install virtualenv --upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pip-2.7 install virtualenv --upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pip install virtualenvwrapper
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fairly simple.&lt;/p>
&lt;h3 id="the-snakepit">The Snakepit&lt;/h3>
&lt;p>This step is common to Arch Linux and Ubuntu. Create a &lt;em>&amp;ldquo;Snakepit&amp;rdquo;&lt;/em> directory for
storing all the virtualenvs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir ~/Snakepit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the following your &lt;code>~/.bashrc&lt;/code> to enable &lt;code>virtualenvwrapper&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#eedd82">WORKON_HOME&lt;/span>=&lt;span style="color:#87ceeb">${&lt;/span>&lt;span style="color:#eedd82">HOME&lt;/span>&lt;span style="color:#87ceeb">}&lt;/span>/Snakepit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">if&lt;/span> [ -f /usr/local/bin/virtualenvwrapper.sh ]; &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> source /usr/local/bin/virtualenvwrapper.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">elif&lt;/span> [ -f /usr/bin/virtualenvwrapper.sh ]; &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> source /usr/bin/virtualenvwrapper.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-a-virtualenv">Creating a virtualenv&lt;/h2>
&lt;p>Open a new shell to ensure that the &lt;code>virtualenvwrapper&lt;/code> configuration is
active.&lt;/p>
&lt;p>The following will create a new virtualenv called &lt;code>Nikola5&lt;/code> based on Python
2.7 and will not give access to the global &lt;code>site-packages&lt;/code> directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkvirtualenv -p python2.7 --no-site-packages ~/Snakepit/Nikola5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>mkvirtualenv_help&lt;/code> shows a full list of arguments, the &lt;code>-r&lt;/code> switch can install
all the packages listed in a &lt;code>pip&lt;/code> requirements file into the newly created
virtualenv. Very useful.&lt;/p>
&lt;h2 id="working-on-a-virtualenv">Working on a virtualenv&lt;/h2>
&lt;p>To workon, or activate, an existing virtualenv do the following.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>workon Nikola5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can switch to another virtualenv at any time, just use &lt;code>workon envname&lt;/code>.
Your shell prompt will change while a virtualenv is being worked on to indicate
which virtualenv is currently active.&lt;/p>
&lt;p>While working on a virtualenv you can &lt;code>pip&lt;/code> install what you need or manually
install any Python libraries safe in the knowledge you will not adversely
damage any other virtualenvs or the global packages in the process. Very useful
for developing a new branch which may have different library requirements than
the master/head.&lt;/p>
&lt;p>When you are finished working in a virtualenv you can deactivate it by simply
executing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>deactivate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That just about sums up my notes.&lt;/p></description><summary>Installing Python and virtualenv on Arch Linux and Ubuntu</summary></item><item><title>GitHub Analytics</title><link>https://wimpysworld.com/posts/github-analytics/</link><pubDate>Fri, 26 Oct 2012 16:39:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/github-analytics/</guid><description>&lt;p>As I mentioned in a previous post we are prepairing to &lt;a href="2012-10-migrating-bzr-to-git.html">migrate our Bazaar
repositories to Git&lt;/a>, or more
precisely to &lt;a href="https://github.com">GitHub&lt;/a>. This migration also heralds the
Open Source releases of many of the core technologies we&amp;rsquo;ve been developing at
&lt;a href="http://www.flightdataservices.com">Flight Data Services&lt;/a> for the last few years.&lt;/p>
&lt;p>I want to track visits for our GitHub projects. A bit of Googling turned up
&lt;a href="http://githalytics.com/">githalytics&lt;/a> which enables you to track visits and
page views for your GitHub projects using
[http://www.google.com/analytics/](Google Analytics).&lt;/p>
&lt;p>To use it, create a new Google Analytics property ID for your GitHub project,
head over to &lt;a href="http://githalytics.com/">http://githalytics.com/&lt;/a> and complete the web form. You&amp;rsquo;ll be
provided a &lt;a href="http://daringfireball.net/projects/markdown/">Markdown&lt;/a> snippet to
insert in your projects &lt;code>README.md&lt;/code>. It will look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f &amp;#34;githalytics.com&amp;#34;)](http://githalytics.com/YourGitHubName/YourGitHubProject)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the snippet to &lt;code>README.md&lt;/code> and push the changes. When someone visits your
GitHub project page, the visit will be tracked. Great!&lt;/p>
&lt;p>However, we write all our documentation using
&lt;a href="http://docutils.sourceforge.net/rst.html">reStructuredText&lt;/a>. But after a
quick Twitter and email exchange with Dimitrios from githalytics and I had
a reStructuredText snippet. It looks something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rest" data-lang="rest">&lt;span style="display:flex;">&lt;span>image:: https://cruel-carlota.pagodabox.com/0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :alt: githalytics.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :target: http://githalytics.com/YourGitHubName/YourGitHubProject
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Same drill, except add this snippet to &lt;code>README.rst&lt;/code> and push the changes.&lt;/p>
&lt;p>So there you have it, Google Analytics tracking of your GitHub project landing
page. If you have more than one project, create a Google Analytics property ID
and githalytics tracking snippet for each project.&lt;/p>
&lt;h4 id="references">References&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="http://githalytics.com/">http://githalytics.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://githalytics.tumblr.com/">http://githalytics.tumblr.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://coderwall.com/team/githalytics">http://coderwall.com/team/githalytics&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://stackoverflow.com/questions/4376560/add-google-analytics-to-github-wiki-pages">http://stackoverflow.com/questions/4376560/add-google-analytics-to-github-wiki-pages&lt;/a>&lt;/li>
&lt;/ul></description><summary>How to add Google Analytics to GitHub projects.</summary></item><item><title>Migrating Bazaar to Git</title><link>https://wimpysworld.com/posts/migrating-bazaar-to-git/</link><pubDate>Tue, 23 Oct 2012 11:50:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/migrating-bazaar-to-git/</guid><description>&lt;p>We have been using &lt;a href="http://bazaar.canonical.com">Bazaar&lt;/a> for source
control at &lt;a href="http://www.flightdataservices.com">work&lt;/a> for nearly five
years. We are about to &lt;a href="http://opensource.org">Open Source&lt;/a> most of our
core technologies and decided that &lt;a href="https://github.com">GitHub&lt;/a> is the
best way to encourage community participation. We have signed up for a
Silver plan at GitHub and will migrate all our Bazaar repositories to Git.&lt;/p>
&lt;p>I have a few personal projects in Bazaar repositories hosted on
&lt;a href="http://www.launchpad.net">Launchpad&lt;/a>. I decided to migrate my projects
to GitHub in order to learn the migration process. What follows is an
overview of how I did it using a fresh virtual machine running Ubuntu 10.04
LTS Server. I used a little project of mine called &lt;code>nullserv&lt;/code> in the
examples below.&lt;/p>
&lt;p>Add the Bazaar and Git PPAs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install python-software-properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:bzr/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:git-core/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install &lt;code>bzr&lt;/code> (and its requirements), &lt;code>curl&lt;/code> and &lt;code>git&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install bzr bzr-fastimport curl git python-paramiko
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the SSH keys and identify yourself.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bzr whoami &lt;span style="color:#87ceeb">&amp;#34;Your Name &amp;lt;name@example.org&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.name &lt;span style="color:#87ceeb">&amp;#34;Your Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.email you@example.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If your Bazaar repository is hosted on Launchpad assert your
identity.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bzr launchpad-login flexiondotorg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Branch the Bazaar repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bzr branch lp:~flexiondotorg/+junk/nullserv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd nullserv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bzr fast-export --plain &lt;span style="color:#87ceeb">`&lt;/span>pwd&lt;span style="color:#87ceeb">`&lt;/span> | git fast-import
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>This step is optional. It will delete and commit the deletions to the Bazaar repository.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">for&lt;/span> FILE in *; &lt;span style="color:#f00">do&lt;/span> rm -rfv &lt;span style="color:#87ceeb">&amp;#34;&lt;/span>&lt;span style="color:#87ceeb">${&lt;/span>&lt;span style="color:#eedd82">FILE&lt;/span>&lt;span style="color:#87ceeb">}&lt;/span>&lt;span style="color:#87ceeb">&amp;#34;&lt;/span>; &lt;span style="color:#f00">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#87ceeb">&amp;#34;This repository has been migrated to Git. https://github.com/flexiondotorg/nullserv&amp;#34;&lt;/span> &amp;gt; README
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bzr add README
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bzr commit -m &lt;span style="color:#87ceeb">&amp;#34;This repository has been migrated to Git. https://github.com/flexiondotorg/nullserv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bzr push :parent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove the Bazaar repository and reset the Git repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm -rf .bzr README
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create &lt;code>.gitattributes&lt;/code> to normalise line endings.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt;.gitattributes&lt;span style="color:#87ceeb">&amp;lt;&amp;lt;ENDGITATTRIBS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"># Normalise line endings:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">* text=auto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"># Prevent certain files from being exported:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">.gitattributes export-ignore
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">.gitignore export-ignore
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">ENDGITATTRIBS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .gitattributes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Migrate &lt;code>.bzrignore&lt;/code> to &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git mv .bzrignore .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#87ceeb">&amp;#34;# Keep empty directories:&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#87ceeb">&amp;#34;!*/.git*&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensure empty directories are retained by git.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find -empty -type d -not -iwholename &lt;span style="color:#87ceeb">&amp;#39;*.git*&amp;#39;&lt;/span> -exec touch &lt;span style="color:#87ceeb">&amp;#39;{}/.gitkeep&amp;#39;&lt;/span> &lt;span style="color:#87ceeb">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add **/.gitkeep
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit the migrated repository&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git commit -a -m &lt;span style="color:#87ceeb">&amp;#34;Migrated from Bazaar to Git.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thanks to Chris for pointing out &lt;code>git filter-branch&lt;/code> in the comments. If you
need to modify the author info in your repository history, you can do so with
this, just replace the names and email addresses accordingly.&lt;/p>
&lt;p>&lt;strong>BEWARE! This should not be performed on a repo that has been shared with others.
Use at your own risk.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git filter-branch --commit-filter &lt;span style="color:#87ceeb">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> if [ &amp;#34;$GIT_COMMITTER_NAME&amp;#34; = &amp;#34;Fred&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_COMMITTER_NAME=&amp;#34;Fred Flintstone&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_AUTHOR_NAME=&amp;#34;Fred Flintstone&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_COMMITTER_EMAIL=&amp;#34;fred@example.org&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_AUTHOR_EMAIL=&amp;#34;fred@example.org&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> git commit-tree &amp;#34;$@&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> elif [ &amp;#34;$GIT_COMMITTER_NAME&amp;#34; = &amp;#34;Barney&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_COMMITTER_NAME=&amp;#34;Barney Rubble&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_AUTHOR_NAME=&amp;#34;Barney Rubble&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_COMMITTER_EMAIL=&amp;#34;barney@example.org&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> GIT_AUTHOR_EMAIL=&amp;#34;barney@example.org&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> git commit-tree &amp;#34;$@&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> git commit-tree &amp;#34;$@&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb"> fi&amp;#39;&lt;/span> HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to delete any files from the commit history, you can optionally do that now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git filter-branch -f --index-filter &lt;span style="color:#87ceeb">&amp;#34;git rm --cached --ignore-unmatch *.THIS *.THAT&amp;#34;&lt;/span> &lt;span style="color:#87ceeb">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#87ceeb">&lt;/span>--prune-empty --tag-name-filter cat -- --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf .git/refs/original/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reflog expire --expire=now --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git gc --prune=now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Resume here, regardless of whether you deleted any files from the commit history or not.
Remove everything from the index.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git rm --cached -r .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Write both the index and working directory from git&amp;rsquo;s database.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git reset --hard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Prepare to make a commit by staging all the files that will get normalized.
This is your chance to inspect which files were never normalized. You may
get lots of messages like: &lt;code>warning: CRLF will be replaced by LF in file.&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#87ceeb">&amp;#34;Forced line endings to eol=lf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aggressively pack the repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git gc --aggressive --prune=now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point you have a migrated git repository. You can poke about a check that
everything is present and correct.&lt;/p>
&lt;p>Optionally you can create a new GitHub repository using their API. Replace &lt;code>USER&lt;/code>
and &lt;code>PASS&lt;/code> with your GitHub login crednetials.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -u &lt;span style="color:#87ceeb">&amp;#39;USER:PASS&amp;#39;&lt;/span> https://api.github.com/user/repos -d &lt;span style="color:#87ceeb">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;nullserv&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to create repositories for an Organisation the following will
work. Replace &lt;code>YourOrganisation&lt;/code> with the organisation name your are a
member of.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -u &lt;span style="color:#87ceeb">&amp;#39;USER:PASS&amp;#39;&lt;/span> https://api.github.com/orgs/YourOrganisation/repos -d &lt;span style="color:#87ceeb">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;nullserv&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Private repositories can be created, providing you have a paid GitHub account,
by changing the &lt;code>POST&lt;/code> data as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&amp;#39;{&amp;#34;name&amp;#34;:&lt;span style="color:#87ceeb">&amp;#34;nullserv&amp;#34;&lt;/span>,&amp;#34;private&amp;#34;:&lt;span style="color:#87ceeb">&amp;#34;true&amp;#34;&lt;/span>}&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, push to the newly created GitHub repo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git remote add origin git@github.com:flexiondotorg/nullserv.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All done, the Bazaar repository has been crippled and the Git repository is
ready for use on GitHub.&lt;/p>
&lt;h4 id="references">References&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/624941">https://gist.github.com/624941&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://stackoverflow.com/questions/2423777/is-it-possible-to-create-a-remote-repo-on-github-from-the-cli-without-ssh">http://stackoverflow.com/questions/2423777/is-it-possible-to-create-a-remote-repo-on-github-from-the-cli-without-ssh&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git">http://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/articles/changing-author-info">https://help.github.com/articles/changing-author-info&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://developer.github.com/v3/repos/">http://developer.github.com/v3/repos/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/articles/dealing-with-line-endings#platform-all">https://help.github.com/articles/dealing-with-line-endings#platform-all&lt;/a>&lt;/li>
&lt;/ul></description><summary>A rough guide to migrating Bazaar repositories to GitHub</summary></item><item><title>MATE Desktop</title><link>https://wimpysworld.com/projects/mate-desktop/</link><pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/mate-desktop/</guid><description>&lt;p>The &lt;a href="https://mate-desktop.org">MATE Desktop Environment&lt;/a> is the continuation of
&lt;a href="https://en.wikipedia.org/wiki/GNOME_2">GNOME 2&lt;/a>. MATE Desktop provides an
intuitive and attractive desktop environment using traditional metaphors for
Linux and other Unix-like operating systems.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://mate-desktop.org">MATE Desktop&lt;/a>&lt;/li>
&lt;li>Date: June 2012 - date&lt;/li>
&lt;li>Role: Developer &amp;amp; Community Manager&lt;/li>
&lt;/ul></description><summary>Preserving a traditional desktop metaphor</summary></item><item><title>Install Sun Java 6 JRE and JDK from .deb packages</title><link>https://wimpysworld.com/posts/install-sun-java-6-jre-and-jdk-from-deb-packages/</link><pubDate>Mon, 16 Jan 2012 13:20:05 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/install-sun-java-6-jre-and-jdk-from-deb-packages/</guid><description>&lt;p>&lt;a href="https://canonical.com">Canonical&lt;/a> disabled my Java PPA at the end of last week.
So I&amp;rsquo;ve developed another solution for installing Java on Ubuntu which doesn&amp;rsquo;t
infringe any copyrights, licenses, terms of use or CoC&amp;rsquo;s. However, by running
this script to download Java you acknowledge that you have read and accepted the
terms of the Oracle end user license agreement.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.oracle.com/technetwork/java/javase/terms/license/">http://www.oracle.com/technetwork/java/javase/terms/license/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>My script is an automated wrapper for &lt;a href="https://github.com/rraptorr/sun-java6">Janusz Dziemidowicz Debian packaging
scripts for Java 6&lt;/a>. My new script
simply downloads the Java binary installers from Oracle, builds the .deb
packages locally on your computer and creates a local &amp;lsquo;apt&amp;rsquo; repository for
them. Once my script has been executed you can then &amp;lsquo;apt-get&amp;rsquo; install/upgrade
Java 6 from your local repository. Packages are compatible with &amp;ldquo;official&amp;rdquo;
Ubuntu ones and pre-existing Java 6 packages will upgrade cleanly. You can
find the script and full usage instructions on github.&lt;/p>
&lt;div class="text-center">
&lt;iframe src="http://ghbtns.com/github-btn.html?user=flexiondotorg&amp;repo=oab-java6&amp;type=watch&amp;count=true&amp;size=large"
allowtransparency="true" frameborder="0" scrolling="0" width="260px" height="30px">&lt;/iframe>
&lt;iframe src="http://ghbtns.com/github-btn.html?user=flexiondotorg&amp;repo=oab-java6&amp;type=fork&amp;count=true&amp;size=large"
allowtransparency="true" frameborder="0" scrolling="0" width="260px" height="30px">&lt;/iframe>
&lt;/div>
&lt;p>Please read the &lt;a href="https://github.com/flexiondotorg/oab-java6/blob/master/README.rst">README&lt;/a>
file for a more detailed explanation of how the script works and how to use it.
If anyone has any problems, then please submit a ticket on my
&lt;a href="https://github.com/flexiondotorg/oab-java6/issues">Issue Tracker&lt;/a>.&lt;/p></description><summary>An alternative approach to install Sun Java 6 on Ubuntu</summary></item><item><title>Sun Java 1.6.0.30 packages for Ubuntu</title><link>https://wimpysworld.com/posts/sun-java-1.6.0.30-packages-for-ubuntu/</link><pubDate>Tue, 10 Jan 2012 10:53:50 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/sun-java-1.6.0.30-packages-for-ubuntu/</guid><description>&lt;h2 id="update-friday-13th-january-2012">Update Friday 13th January 2012&lt;/h2>
&lt;p>&lt;strong>My Java PPA has been disabled by Canonical, possibly because they violate the Ubuntu CoC and PPA terms of use, as Jef Spaleta noted in the comments below, although I&amp;rsquo;ve had no communication from Canonical at this time. I&amp;rsquo;m preparing an alternative solution, for those of you who need Sun Java 6, that doesn&amp;rsquo;t violate and copyrights, CoCs or terms of use. A new blog post will be made when that alternate solution is available.&lt;/strong>&lt;/p>
&lt;h2 id="update-monday-16th-january-2012">Update Monday 16th January 2012&lt;/h2>
&lt;p>&lt;strong>I&amp;rsquo;ve developed another solution for installing Java 6u30 on Ubuntu which
doesn&amp;rsquo;t infringe any copyrights, licenses, terms of use or CoC&amp;rsquo;s.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="2012-01-install-sun-java-6-jre-jdk-from-deb-packages.html">Install Sun Java 6 JRE and JDK from .deb packages&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;del>Sun Java 6 packages are being removed from Ubuntu in the near future for the
following reasons:&lt;/del>&lt;/p>
&lt;ul>
&lt;li>&lt;del>As of August 24th 2011, Canonical no longer have permission to redistribute
new Java packages as Oracle has retired the &amp;ldquo;Operating System Distributor
License for Java&amp;rdquo;.&lt;/del>&lt;/li>
&lt;li>&lt;del>Oracle has published an advisory about security issues in the version of
Java currently in the partner archive. Some of these issues are currently
being exploited in the wild.&lt;/del>&lt;/li>
&lt;li>&lt;del>Due to the severity of the security risk, &lt;strong>Canonical released a security
update for the Sun JDK browser plugin which disables the plugin on all machines&lt;/strong>.&lt;/del>&lt;/li>
&lt;li>&lt;del>In the near future, &lt;strong>Canonical will remove all Sun JDK packages from the
Partner archive&lt;/strong>. This will be accomplished by pushing empty packages to
the archive, so that the Sun JDK will be removed from all users machines
when they do a software update. &lt;strong>Users of these packages who have not
migrated to an alternative solution will experience failures after the
package updates have removed Oracle Java from the system&lt;/strong>.&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>&lt;del>See the full Canonical notice below.&lt;/del>&lt;/p>
&lt;ul>
&lt;li>&lt;del>&lt;a href="https://lists.ubuntu.com/archives/ubuntu-security-announce/2011-December/001528.html">https://lists.ubuntu.com/archives/ubuntu-security-announce/2011-December/001528.html&lt;/a>&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>&lt;del>My personal motivations for creating this PPA are as follows:&lt;/del>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;del>I require Sun Java 6 for two enterprise applications we use at work. OpenJDK is not fully compatible.&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>I require Sun Java 6 for two desktop applications at home (so does my father-in-law). OpenJDK not compatible in one instance and not fully compatible in the other.&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>I require Sun Java 6 browser plugin for a web applications I use at home. OpenJDK is not compatible.&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>A friend of mine requires Sun Java 6 for building AOSP from source. OpenJDK is not compatible.&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Some friends of mine play Minecraft, apparently this will help ;-)&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Janusz Dziemidowicz made it easy for me - &lt;a href="https://github.com/rraptorr/sun-java6">https://github.com/rraptorr/sun-java6&lt;/a>&lt;/del>
&lt;del>The PPA currently publishes Sun Java 6 1.6.0.30 for:&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Lucid i386/amd64&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Maverick i386/amd64&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Natty i386/amd64&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Oneiric i386/amd64&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Precise i386. However, amd64 is failing to build on Precise. I will try and fix this in due course.&lt;/del>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;del>To Sun Java 6 , previously installed via packages, do the following.&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get dist-upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;del>To install Sun Java 6 JRE do the following:&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install sun-java6-jre
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;del>To install Sun Java 6 browser plugin do the following:&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install sun-java6-plugin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;del>To install Sun Java 6 JDK do the following:&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install sun-java6-jdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;del>You can take a look a round my PPA from the URL below:&lt;/del>&lt;/p>
&lt;ul>
&lt;li>&lt;del>&lt;a href="https://launchpad.net/~flexiondotorg/+archive/java">https://launchpad.net/~flexiondotorg/+archive/java&lt;/a>&lt;/del>&lt;/li>
&lt;/ul></description><summary>Get Sun Java 1.6.0 packages from a PPA</summary></item><item><title>Shotwell 0.11 PPA available for Ubuntu Lucid and Maverick</title><link>https://wimpysworld.com/posts/shotwell-0.11-ppa-available-for-ubuntu-lucid-and-maverick/</link><pubDate>Tue, 30 Aug 2011 11:05:50 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/shotwell-0.11-ppa-available-for-ubuntu-lucid-and-maverick/</guid><description>&lt;p>Like many others I wanted &lt;a href="http://yorba.org/shotwell/">Shotwell&lt;/a> 0.11
for Lucid and Maverick so I&amp;rsquo;ve created a PPA for it.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://launchpad.net/~flexiondotorg/+archive/shotwell">https://launchpad.net/~flexiondotorg/+archive/shotwell&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>My PPA contains Shotwell 0.11 built for Ubuntu Lucid 10.04 LTS and Ubuntu
Maverick 10.10. I created this PPA because I run Lucid at home and wanted the
new version of Shotwell. Sadly, Yorba aren&amp;rsquo;t going to provide new Shotwell
packages for Lucid due to the reasons discussed in the following ticket: -&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://trac.yorba.org/ticket/3015">http://trac.yorba.org/ticket/3015&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As mentioned in the ticket above, there are newer versions of Shotwell available
for Lucid in other PPAs. However, those PPAs contain hundreds of packages. If
you&amp;rsquo;re not that brave, like me, then hopefully my PPA provides what you
need. I have built Shotwell with minimal changes from the original Yorba
source packages and not polluted my PPA with any unnecessary packages. Since
Shotwell 0.11 you &lt;strong>must&lt;/strong> enable the GStreamer PPA, see the ticket
below for the reasons for this requirement:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://redmine.yorba.org/issues/3716">http://redmine.yorba.org/issues/3716&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>To install Shotwell on Lucid and Maverick do the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/shotwell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:gstreamer-developers/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get dist-upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install shotwell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enjoy!&lt;/p></description><summary>Showell 0.11 is available in a PPA for Ubuntu 10.04 &amp;amp; 10.10</summary></item><item><title>Shotwell 0.8.1 PPA available for Ubuntu Lucid</title><link>https://wimpysworld.com/posts/shotwell-0.8.1-ppa-available-for-ubuntu-lucid/</link><pubDate>Thu, 17 Mar 2011 17:04:42 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/shotwell-0.8.1-ppa-available-for-ubuntu-lucid/</guid><description>&lt;p>Like many others I wanted &lt;a href="http://yorba.org/shotwell/">Shotwell&lt;/a> for Lucid
so I&amp;rsquo;ve created a PPA for it.&lt;/p>
&lt;ul>
&lt;li>&amp;lt;https://launchpad.net/~flexiondotorg/+archive/shotwell.&lt;/li>
&lt;/ul>
&lt;p>My PPA contains Shotwell 0.8.1 built for Ubuntu Lucid 10.04 LTS. I created the
PPA because I run Lucid at home and wanted the new version of Shotwell. Sadly,
Yorba aren&amp;rsquo;t going to provide a Lucid build of Shotwell 0.8.1 due to the
reasons discussed in the following ticket:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://trac.yorba.org/ticket/3015">http://trac.yorba.org/ticket/3015&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As mentioned in the ticket above, there are versions of Shotwell 0.8.1
available for Lucid in other PPAs. However, those PPAs contain hundreds of
packages. If you&amp;rsquo;re not that brave, like me, then hopefully my PPA provides
what you need. I have built Shotwell 0.8.1 with minimal changes from the
original Yorba source packages and not polluted my PPA with any unnecessary
packages &lt;strong>NOTE!&lt;/strong> My PPA has dependencies that are satisfied by the Yorba
PPA, so you must also enable the Yorba PPA too.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://launchpad.net/~yorba/+archive/ppa">https://launchpad.net/~yorba/+archive/ppa&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>To install Shotwell 0.8.1 on Lucid do the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:yorba/ppa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:flexiondotorg/shotwell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install shotwell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><summary>Get the latest Shotwell 0.8.1 via a PP for Ubuntu 10.04</summary></item><item><title>Bash script to retrieve Ubuntu codenames and versions</title><link>https://wimpysworld.com/posts/bash-script-to-retrieve-ubuntu-codenames-and-versions/</link><pubDate>Wed, 16 Mar 2011 13:44:54 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/bash-script-to-retrieve-ubuntu-codenames-and-versions/</guid><description>&lt;p>I&amp;rsquo;m working a script to automatically backport &lt;a href="http://www.debian.org">Debian&lt;/a>
packages to Ubuntu. I needed a way to get a list of currently supported/active
Ubuntu releases by codename or version. Here is how I do it.&lt;/p>
&lt;h2 id="get-a-list-of-ubuntu-codenames">Get a list of Ubuntu codenames&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget -q http://cdimage.ubuntu.com/releases/ -O - | sed -e :a -e &lt;span style="color:#87ceeb">&amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g;/&amp;lt;/N;//ba&amp;#39;&lt;/span> | grep &lt;span style="color:#87ceeb">&amp;#39;^[[:space:]][a-z]&amp;#39;&lt;/span> | sed &lt;span style="color:#87ceeb">&amp;#39;s/\///g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="get-a-list-of-ubuntu-versions">Get a list of Ubuntu versions&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget -q http://cdimage.ubuntu.com/releases/ -O - | sed -e :a -e &lt;span style="color:#87ceeb">&amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g;/&amp;lt;/N;//ba&amp;#39;&lt;/span> | grep &lt;span style="color:#87ceeb">&amp;#39;^[[:space:]][1-9]&amp;#39;&lt;/span> | sed &lt;span style="color:#87ceeb">&amp;#39;s/\///g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><summary>Get a list of Ubuntu codename and version with wget</summary></item><item><title>Goodbye F-Spot. Hello Shotwell</title><link>https://wimpysworld.com/posts/goodbye-f-spot-hello-shotwell/</link><pubDate>Sat, 20 Mar 2010 15:39:17 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/goodbye-f-spot-hello-shotwell/</guid><description>&lt;p>I&amp;rsquo;ve finally found a photo organiser for Linux I can live with,
&lt;a href="http://yorba.org/shotwell/">Shotwell&lt;/a>. Shotwell is a photo organiser
for &lt;a href="http://www.gnome.org">GNOME&lt;/a> that I&amp;rsquo;ve been testing for a few
months now but the recent 0.5 release which added tagging and printing,
it means Shotwell is finally ready replace &lt;a href="http://f-spot.org">F-Spot&lt;/a> on
my workstation.&lt;/p>
&lt;p>Shotwell is intuitive, well documented, extremely easy to use and reliable.
It&amp;rsquo;s easy to dismiss Shotwell as an over simplified photo manager. But once
you start using it, you&amp;rsquo;ll quickly appreciate its clean interface and
easy-to-use tools. Don&amp;rsquo;t just take my word for it either, Shotwell is now the
default photo manager in &lt;a href="http://fedoraproject.org">Fedora&lt;/a> 13 alpha. Here is
a quick run down of the features.&lt;/p>
&lt;ul>
&lt;li>Import photos from folders or from any digital camera supported by gPhoto.&lt;/li>
&lt;li>Shotwell automatically groups photos taken at the same time. You can also
use tags to organize your photo collection.&lt;/li>
&lt;li>You can rotate, crop, reduce red-eye, and adjust the exposure, saturation,
tint, and temperature of each photo.&lt;/li>
&lt;li>Publish photos to Facebook, Flickr and Picasa Web Albums.&lt;/li>
&lt;/ul>
&lt;p>Shotwell provides a non-destructive way to tweak your photos. Instead of
modifying the original photos, Shotwell stores all edits in a database and
applies them on-the-fly as necessary. This means that you can easily undo all
edits. Shotwell comes equipped with all the usual photo enhancing tools and
slideshow. You can download a source tarball from the Shotwell home page at
&lt;a href="http://www.yorba.org/shotwell/">http://www.yorba.org/shotwell/&lt;/a> or grab a binary for Ubuntu Karmic or Lucid
via Yorba&amp;rsquo;s Launchpad PPA.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://launchpad.net/~yorba/+archive/ppa">https://launchpad.net/~yorba/+archive/ppa&lt;/a>&lt;/li>
&lt;/ul></description><summary>F-Spot you serve me well, but here comes Shotwell</summary></item><item><title>Linux Hex Editors</title><link>https://wimpysworld.com/posts/linux-hex-editors/</link><pubDate>Thu, 03 Dec 2009 11:59:30 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/linux-hex-editors/</guid><description>&lt;p>We use hex editors daily at work, we are regularly cutting up data from flight
data recorders for analysis or recovery. So when I find a new hex editor for
Linux I usually give it a try. I happened across a blog listing five GUI hex
editors for Ubuntu today. Find out more below.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://unixlab.blogspot.com/2009/08/five-gui-hex-editors-for-ubuntu.html">Five gui hex editors for ubuntu&lt;/a>&lt;/li>
&lt;/ul></description><summary>Five GUI hex editors for Linux to take a look at</summary></item><item><title>M2VRequantiser for 32-bit and 64-bit Linux</title><link>https://wimpysworld.com/posts/m2vrequantiser-for-32-bit-and-64-bit-linux/</link><pubDate>Thu, 23 Apr 2009 16:47:20 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/m2vrequantiser-for-32-bit-and-64-bit-linux/</guid><description>&lt;p>I recently discovered that &lt;code>tcrequant&lt;/code> (part of the
&lt;a href="http://http://www.transcoding.org/">transcode&lt;/a> suite of tools) has been
deprecated. Worst still I found that when I ran &lt;code>tcrequant&lt;/code> on my 64-bit Linux
workstation is was corrupting the video. See the links below for details.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://tcforge.berlios.de/archives/2009/01/18/transcode_1_1_0_final_release/index.html">transcode 1.1.0 Final Release&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.mail-archive.com/transcode-users@exit1.org/msg01773.html">[transcode-users] tcrequant status&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Therefore I decided to get the &lt;a href="http://www.metakine.com/products/dvdremaster/developers.html">M2VRequantiser&lt;/a>
code from &lt;a href="http://www.metakine.com/">Metakine&lt;/a> working on both 32-bit and 64-bit
Linux as a replacement for &lt;code>tcrequant&lt;/code>. M2VRequantiser accepts the raw MPEG2 video
data (not VOB) from the standard input and writes the recompressed frames to
the standard output. M2VRequantiser takes two arguments. The first one is a
floating point value specifying the ratio of compression. The second is the
size of the M2V, since the data is streamed to M2VRequantiser it cannot know
the M2V size. The following command would recompress &amp;lsquo;original.m2v&amp;rsquo;, whose
size is 1024000 bytes, by a factor of 1.25.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>M2VRequantiser 1.25 &lt;span style="color:#f60">1024000&lt;/span> &amp;lt; original.m2v &amp;gt; requantised.m2v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;ve only tested on 32-bit and 64-bit Linux, specifically Ubuntu 8.10. It works
for me but I&amp;rsquo;d be interested to get your feedback.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://code.launchpad.net/~flexiondotorg/m2vrequantiser/trunk">M2VRequantiser&lt;/a>&lt;/li>
&lt;/ul></description><summary>Finding a MPEG-2 video requantising solution for Linux</summary></item><item><title>Converting Matroska to M2TS for PS3 and Mediatomb</title><link>https://wimpysworld.com/posts/converting-matroska-to-m2ts-for-ps3-and-mediatomb/</link><pubDate>Wed, 15 Apr 2009 16:19:24 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/converting-matroska-to-m2ts-for-ps3-and-mediatomb/</guid><description>&lt;p>It has been a while since I last posted, mainly due to not having Internet
access at home for a month. Anyway, I&amp;rsquo;m online again and I have been tinkering
with various projects the most recent of which is Matroska conversion (again).&lt;/p>
&lt;h2 id="matroska-to-mp4">Matroska to MP4&lt;/h2>
&lt;p>For sometime I have been converting Martoska files to MPEG-4 with AAC 5.1 audio
so I can stream them via Mediatomb to my PlayStation 3. The conversion process
works well although there is some overhead in transcoding the audio and the
AAC 5.1 audio is not as good quality as the original AC3 or DTS.&lt;/p>
&lt;p>If you are interested I&amp;rsquo;ve put my code in GitHub, the script automates the
whole process.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/flexiondotorg/MKV-to-MP4">MPV-to-MP4&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="matroska-to-m2ts">Matroska to M2TS&lt;/h2>
&lt;p>A little while back I read it was possible to convert those same Matroska file
to M2TS files which, so long as the audio is AC3, so takes much less time to
convert. As the PlayStation 3 can&amp;rsquo;t play DTS audio streams inside a M2TS container
there is still a requirement to transcode DTS to AC3. That said the conversion to
M2TS requires less file I/O than converting to MPEG-4 and is therefore it is
generally a quicker conversion method, typically just 2 or 3 minutes on my
workstation at home.&lt;/p>
&lt;p>Plus the audio quality of the AC3 or transcoded DTS is better than that of
transcoded AAC 5.1. I&amp;rsquo;ve created my own script to fully automate the conversion
process. The script has been tested on Ubuntu 8.10 64-bit but there is an
outside chance it will work on Mac OS X if you can get the required tools
installed. Again, you can find my script on GitHub.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/flexiondotorg/MKV-to-M2TS">MPV-to-M2TS&lt;/a>&lt;/li>
&lt;/ul></description><summary>Fast conversion of Matroska video to MPEG2-TS</summary></item><item><title>Distributing closed source Python applications</title><link>https://wimpysworld.com/posts/distributing-closed-source-python-applications/</link><pubDate>Thu, 29 Jan 2009 13:04:03 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/distributing-closed-source-python-applications/</guid><description>&lt;p>Last November we switched to &lt;a href="http://www.python.org/">Python&lt;/a> as the principal
language for all new software development projects at work, ditching Microsoft
Visual C++ and PHP in the process. Last Friday we released our first Python
application to our customers for both Windows and Linux users.&lt;/p>
&lt;p>Although we make good use of Open Source software development tools and
methodologies the application we have just written is propritary and the
source can not be released publicly. We needed to compile, or &lt;em>freeze&lt;/em>, the
Python script in order to create a standalone executable. Tools that do this
have been around for sometime, however our application makes use of Win32
Extensions for Python and WMI on Windows, DBUS/HAL on Linux, wxPython
on both, and a number of other modules. This is quite a big ask for the Python
script compilers and initially the only tool which could build this lot
successfully was &lt;a href="http://www.py2exe.org/">py2exe&lt;/a>. Sadly that only solves part
of the problem since it is a Windows only tool.&lt;/p>
&lt;p>Then we found &lt;a href="http://pypi.python.org/pypi/bbfreeze/">bbfreeze&lt;/a>, which
supports both Windows and Linux with Mac OS X support being actively
developed. &lt;code>bbfreeze&lt;/code> has a simple build API and we were soon using it to build
stand alone executables for both Windows and Linux. Everything is peachy, all
we needed was as means to install our application.&lt;/p>
&lt;p>We only need a tarball for Linux since we manage all kiosk installations, but
our customer can install the Windows version. Enter &lt;a href="http://www.jrsoftware.org/isinfo.php">InnoSetup&lt;/a>.
InnoSetup is a free installer for Windows programs and installer can even be
created from the command line, perfect for integration with our Jenkins build
servers.&lt;/p></description><summary>Freezing proprietary Python applications for distribution to clients</summary></item><item><title>Hacking WordTwit into WordDent</title><link>https://wimpysworld.com/posts/hacking-wordtwit-into-worddent/</link><pubDate>Fri, 23 Jan 2009 18:24:20 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/hacking-wordtwit-into-worddent/</guid><description>&lt;p>I have quickly forked &lt;a href="https://wordpress.org/plugins/wordtwit/">WordTwit&lt;/a> into
WordDent. WordDent is a Wordpress plugin that utilizes the Twitter API to
automatically push a published post to your &lt;a href="http://identi.ca">Identi.ca&lt;/a>
account as a dent. It allows all your Identi.ca contacts to keep up to date
with your blog postings. I&amp;rsquo;m still just testing that WordDent works
correctly. I&amp;rsquo;ll find out if the nice people over at
&lt;a href="http://www.bravenewcode.com">Brave New Code&lt;/a> will agree to me releasing
WordDent since I can&amp;rsquo;t fine any license details for WordTwit.&lt;/p></description><summary>Automatically post Wordpress blog notification to Identi.ca</summary></item><item><title>POLARIS</title><link>https://wimpysworld.com/projects/polaris/</link><pubDate>Tue, 01 May 2007 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/polaris/</guid><description>&lt;p>Led the design, development and operation of the POLARIS project at
&lt;a href="https://flightdataservices.com">Flight Data Services&lt;/a>. An Open Source analysis
engine developed using Python that can scale to analyse and report on millions
of commercial aviation flights to comply with global aviation safety regulations.
Now known as Flight Data Connect and owned by L3HARRIS and apparently no longer
available as Open Source.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://flightdataservices.com">Flight Data Services&lt;/a>&lt;/li>
&lt;li>Date: May 2007 - September 2015&lt;/li>
&lt;li>Role: Manager of IT Operations &amp;amp; Software Engineering&lt;/li>
&lt;/ul></description><summary>Disrupting incumbent flight data analysis solutions with Open Source</summary></item><item><title>R3-born 0.1.1 is released!</title><link>https://wimpysworld.com/posts/r3-born-0.1.1-is-released/</link><pubDate>Fri, 09 Mar 2007 21:59:45 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/r3-born-0.1.1-is-released/</guid><description>&lt;p>&lt;a href="http://www.sourceforge.net/projects/r3-born/">R3-born&lt;/a> 0.1.1 is released :-)&lt;/p>
&lt;h2 id="r3-born-core-change-log">R3-born Core Change Log&lt;/h2>
&lt;p>Here are the main changes for this release. &lt;em>v0.1.1 : 9th March 2007&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Added Akismet anti-spam API&lt;/li>
&lt;li>Added a version checker for the Core and also for Blocks and Modules.&lt;/li>
&lt;li>Added search bot (Google, MSN, Yahoo!, etc) detection.&lt;/li>
&lt;li>Added logging (in Combined Log Format) to the R3-born Intrusion Prevention System.&lt;/li>
&lt;li>Enhanced the Module API so it now supports safe updating and custom CSS for blocks and modules.&lt;/li>
&lt;li>Enhanced the Layout Manager&lt;/li>
&lt;li>Enhanced the Registration and Profile pages by separating them.&lt;/li>
&lt;li>Enhanced the Template engine by back porting some features from phpBB 3.0.x&lt;/li>
&lt;li>Optimised and fixed the Search API&lt;/li>
&lt;li>Optimised and simplified Coloured Groups.&lt;/li>
&lt;li>Improved the Groups Management ACP&lt;/li>
&lt;li>Improved the Styles Management ACP&lt;/li>
&lt;li>Fixed various bugs in the core.&lt;/li>
&lt;li>Significant feature enhancements, bug fixes and optimisations added to the Menu and Who Is Online blocks.&lt;/li>
&lt;li>Significant feature enhancements, bug fixes and optimisations added to the Comments, Downloads, Forum, Pages,&lt;/li>
&lt;li>Private Messages, Weblogs and View Online modules.&lt;/li>
&lt;li>New modules : bot_list, cookie, error, google, referrers and sql_backup&lt;/li>
&lt;li>New blocks : recent_blogs, recent_comments, recent_pages, recent_topics, search, socmarks and visit_counter.&lt;/li>
&lt;/ul>
&lt;p>R3-born 0.1.1 has fulfilled its first major objective, which is to be functional
enough to run a website.&lt;/p></description><summary>R3-born is good enough to run a website</summary></item><item><title>R3-born 0.1.0 is released!</title><link>https://wimpysworld.com/posts/r3-born-0.1.0-is-released/</link><pubDate>Tue, 30 Jan 2007 11:52:55 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/r3-born-0.1.0-is-released/</guid><description>&lt;p>Finally, R3-born 0.1.0 is released. &lt;a href="http://www.sourceforge.net/projects/r3-born/">R3-born&lt;/a>
is a content management system for modest websites which I hope will be ideal for
individuals running their own sites or small community websites.&lt;/p>
&lt;p>Due to my accident I have not been able to address all of the bugs which have
been reported recently and the downloads are only available as bzip2 tarballs
right now. Please report any bugs you might encounter as 0.1.0 has really only
been tested on Debian Sarge (stable) running PHP4 and MSQL 4. Feedback from
other configurations will be useful and all reported bugs will be investigated.&lt;/p></description><summary>After 10 months work R3-born 0.1.0 is ready</summary></item><item><title>Announcing R3-born</title><link>https://wimpysworld.com/posts/announcing-r3-born/</link><pubDate>Fri, 08 Sep 2006 17:48:47 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/announcing-r3-born/</guid><description>&lt;p>I suppose it is a bit silly to announce this just before I go on holiday but
what the heck. &lt;a href="http://www.sourceforge.net/projects/r3-born/">R3-born&lt;/a> is
intended to be a simple and modular content management system for modest websites.
My hope is that it will be ideal for individuals running their own sites or for
small community websites. R3-born is coded in PHP (4.2.0 or better required)
and requires an SQL database, currently MySQL 3.x, 4.x and 5.x, Postgres 7.x
or better and MS-SQL 7.x or better are supported.&lt;/p>
&lt;h2 id="current-status">Current Status&lt;/h2>
&lt;p>Right now, R3-born is considered pre-alpha and not suitable for a production
website but is ready for testers to start feeding back on bugs, feature requests
and in the near future code changes. Development has been fairly rapid so far. I
started the project in April 2006 and I hope to release a beta version of
R3-born later in 2006.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.sourceforge.net/projects/r3-born/">http://www.sourceforge.net/projects/r3-born/&lt;/a>&lt;/li>
&lt;/ul></description><summary>Minerva is r3-born</summary></item><item><title>Comments off, Overdue update and R3-born</title><link>https://wimpysworld.com/posts/comments-off-overdue-update-and-r3-born/</link><pubDate>Tue, 04 Jul 2006 13:14:55 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/comments-off-overdue-update-and-r3-born/</guid><description>&lt;p>First of all, I have disabled comments on my blog. &lt;a href="http://jaws-project.com/">Jaws&lt;/a>
has spam protection and captachs but both implementations suck. This site doesn&amp;rsquo;t
generate much feedback so disabling comments altogether is not really a problem.
I haven&amp;rsquo;t updated the site recently and here is why. The 0.6.x release of Jaws
is buggy and I still haven&amp;rsquo;t found anything else which fully meets my needs for
managing my own web content.&lt;/p>
&lt;p>Therefore for the last couple of months I have been working on an open source
CMS of my own called R3-born. More details to follow about that soon, but you
can find the project over at Sourceforge, don&amp;rsquo;t expect anything to work
(although it does for the most part) it is pre-alpha and unreleased. SVN is the
only way to snag the source.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.sourceforge.net/projects/r3-born/">R3-born&lt;/a>&lt;/li>
&lt;/ul></description><summary>Jaws spam counter measures suck</summary></item><item><title>Project Minerva is coming home</title><link>https://wimpysworld.com/posts/project-minerva-is-coming-home/</link><pubDate>Wed, 26 Apr 2006 17:42:11 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/project-minerva-is-coming-home/</guid><description>&lt;p>Despite a generous offer from a Minerva enthusiast a year or so ago to freely
host the Project Minerva sites, all the Project Minerva hosting is coming back
to where it started and rightly belongs. Yes, right here with me. It just
goes to show you really don&amp;rsquo;t get anything for free. The developers have had
several outages with the server which was provided by SpiderTech Hosting, so
we are bringing it back here where we can look after our interests directly.&lt;/p>
&lt;p>Minerva users might be wondering if the fact I am fully hosting Project
Minerva again means I am going to be developing for the project again. Well,
we will just have to see but I did inform Chris of a little project I kicked
off last week which may (or may not) lead to something.&lt;/p></description><summary>It&amp;rsquo;s coming home. Minerva is coming home.</summary></item><item><title>Portable app</title><link>https://wimpysworld.com/posts/portable-app/</link><pubDate>Thu, 09 Mar 2006 05:40:07 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/portable-app/</guid><description>&lt;p>I started a new job last week, I am contracting for the first time. I needed
some applications installed on my desktop at work, but to do so would not be
permitted as part of my clients standard build policies.&lt;/p>
&lt;p>So I started making a USB disk with the tools I needed and in doing do I found
the &lt;a href="http://portableapps.com/">Portableapp&lt;/a> and &lt;a href="http://www.portablefreeware.com/">The Portable Freeware Collection&lt;/a>
websites which ease the process no end.&lt;/p>
&lt;p>A portable app is a computer program that you can carry around with you on a
portable device and use on any Windows computer. When your USB thumb drive,
portable hard drive, iPod or other portable device is plugged in, you have
access to your software and personal data just as you would on your own PC. And
when you unplug, none of your personal data is left behind.&lt;/p></description><summary>Working around corporate Windows policies with Portable Apps</summary></item><item><title>Ubuntu</title><link>https://wimpysworld.com/projects/ubuntu/</link><pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/projects/ubuntu/</guid><description>&lt;p>Ubuntu comes with everything you need to run your organisation, school, home or
enterprise. All the essential applications, like an office suite, browsers,
email and media apps come pre-installed.&lt;/p>
&lt;p>Community contributor since 2006, worked for Canonical from 2016 to 2021
progressing from software engineer to director of engineering. I remain active
in the Ubuntu community.&lt;/p>
&lt;ul>
&lt;li>Organisation: &lt;a href="https://ubuntu-mate.org">Ubuntu Project&lt;/a> &amp;amp; &lt;a href="https://canonical.com">Canonical&lt;/a>&lt;/li>
&lt;li>Date: January 2006 - date&lt;/li>
&lt;li>Role: Community contributor&lt;/li>
&lt;/ul></description><summary>From community contributor to director of engineering and back again</summary></item><item><title>Leaving Minerva</title><link>https://wimpysworld.com/posts/leaving-minerva/</link><pubDate>Thu, 01 Sep 2005 09:47:16 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/leaving-minerva/</guid><description>&lt;p>Yesterday was a sad day. I finally notified the core &lt;a href="http://sourceforge.net/projects/minerva/">Minerva&lt;/a>
developers that I am leaving the project. Given that I started the project a few
years back it was not a decision I made lightly.&lt;/p>
&lt;p>I have a couple of reasons for leaving the project, the main one being that I
just do not have the time available to effectively lead or contribute to the
project. All open source projects require good leadership and I haven&amp;rsquo;t been able
to provide that for most of 2005. It is with the best interests of Minerva in
mind that I decided to leave.&lt;/p>
&lt;p>However, Minerva is in very good hands and is under active development,
with Dave and Chris leading the effort. I wish all the Minerva developers and
users every success with the upcoming release of R4, it is a marvelous
achievement and I am sure will prove to be very successful. I will be
keeping an eye on R4 development, and if time permits, I may contribute some
blocks and modules in the future. Until then, good luck and make me proud!&lt;/p></description><summary>Standing down from the Minerva project</summary></item><item><title>Introducing Stanley, a new theme for Jaws</title><link>https://wimpysworld.com/posts/introducing-stanley-a-new-theme-for-jaws/</link><pubDate>Fri, 12 Aug 2005 09:29:53 +0000</pubDate><author>martin@wimpress.com (Martin Wimpress)</author><guid>https://wimpysworld.com/posts/introducing-stanley-a-new-theme-for-jaws/</guid><description>&lt;p>I&amp;rsquo;ve finished hacking together a new theme for &lt;a href="http://jaws-project.com/">Jaws&lt;/a>
0.5.x, which I have named Stanley, and is now the default theme on this site.
I&amp;rsquo;ve still got to fix a couple of bugs and make sure that it is compatible with
browsers other than Firefox. I wanted a theme which was crisp and clean, but
also fully compatible with Jaws, so I decided to blend some of my favourite
themes together. Stanley is inspired by the Kubrick theme which is popular among
bloggers and although the Kubrick graphics have been borrowed the style sheet
and layout are derived from the &lt;code>jaws&lt;/code>, &lt;code>orange-grey&lt;/code> and &lt;code>simple-green&lt;/code>
themes which are bundled with Jaws. As a result Stanley is properly Jaws
compatible, in that left and right layouts work, all the CSS elements are
supported and CSS tweaks are used throughout to improve the visual appeal.&lt;/p></description><summary>A new theme for Jaws called Stanley</summary></item></channel></rss>